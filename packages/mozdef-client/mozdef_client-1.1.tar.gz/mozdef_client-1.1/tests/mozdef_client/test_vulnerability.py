from mozdef_client import MozDefVulnerability


class TestMozDefVulnerability():
    def test_init(self):
        vulnerability = MozDefVulnerability('http://127.0.0.1')
        assert vulnerability._url == 'http://127.0.0.1'

    def test_validate(self):
        vulnmsg = {}
        vulnmsg['description'] = 'system vulnerability management ' \
            'automation'
        vulnmsg['utctimestamp'] = '2015-01-21T15:33:51.136378+00:00'
        vulnmsg['sourcename'] = 'development'
        vulnmsg['asset'] = {}
        vulnmsg['asset']['assetid'] = 23
        vulnmsg['asset']['ipv4address'] = '1.2.3.4'
        vulnmsg['asset']['macaddress'] = ''
        vulnmsg['asset']['hostname'] = 'git.mozilla.com'
        vulnmsg['vuln'] = {}
        vulnmsg['vuln']['status'] = 'new'
        vulnmsg['vuln']['vulnid'] = 'nexpose:43883'
        vulnmsg['vuln']['title'] = \
            'RHSA-2013:1475: postgresql and postgresql84 security update'
        vulnmsg['vuln']['discovery_time'] = 1421845863
        vulnmsg['vuln']['age_days'] = 32.7
        vulnmsg['vuln']['known_malware'] = False
        vulnmsg['vuln']['known_exploits'] = False
        vulnmsg['vuln']['cvss'] = 8.5
        vulnmsg['vuln']['cves'] = ['CVE-2013-022', 'CVE-2013-1900']

        vulnerability = MozDefVulnerability('http://127.0.0.1')
        assert vulnerability.validate() is True
        vulnerability.construct()
        assert vulnerability.validate_log() is False
        vulnerability.log = vulnmsg
        vulnerability.construct()
        assert vulnerability.validate_log() is True
