{"version":3,"sources":["webpack://@retrolab/lab-extension/./lib/index.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACoD;AACyB;AAC1B;AACF;AACO;AACF;AACsB;AACxB;AACG;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAgB;AACxB,QAAQ,iEAAe;AACvB,QAAQ,2DAAS;AACjB,QAAQ,8DAAW;AACnB,QAAQ,8DAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,kBAAkB;AACjC,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA,mBAAmB,sDAAsD;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,UAAU,EAAE,qBAAqB;AACpE,iBAAiB;AACjB;AACA,aAAa;AACb;AACA,iCAAiC,6BAA6B;AAC9D;AACA;AACA,yCAAyC,UAAU;AACnD;AACA;AACA,0EAA0E,sEAAoB;AAC9F;AACA;AACA,2BAA2B;AAC3B,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAW;AAC7B,0BAA0B,QAAQ;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,sBAAsB,iEAAY;AAClC,8BAA8B,QAAQ;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,yEAAkB;AACxC,8BAA8B,QAAQ;AACtC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,gEAAW;AAC1B,eAAe,2DAAS,EAAE,iEAAe;AACzC;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA;AACA;AACA,4BAA4B,wEAAqB;AACjD;AACA,SAAS;AACT;AACA;AACA,gCAAgC,sCAAsC;AACtE;AACA;AACA,6BAA6B,gDAAgD;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,OAAO,EAAC","file":"lib_index_js.ef0ffc64b10eabf589e1.js","sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { ILabShell } from '@jupyterlab/application';\nimport { CommandToolbarButton, ICommandPalette } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { jupyterIcon, jupyterFaviconIcon } from '@jupyterlab/ui-components';\nimport { IRetroShell } from '@retrolab/application';\nimport { retroSunIcon } from '@retrolab/ui-components';\n/**\n * The command IDs used by the application plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    /**\n     * Launch RetroLab Tree\n     */\n    CommandIDs.launchRetroTree = 'retrolab:launch-tree';\n    /**\n     * Open RetroLab\n     */\n    CommandIDs.openRetro = 'retrolab:open-retro';\n    /**\n     * Open in Classic Notebook\n     */\n    CommandIDs.openClassic = 'retrolab:open-classic';\n    /**\n     * Open in JupyterLab\n     */\n    CommandIDs.openLab = 'retrolab:open-lab';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * A plugin to add custom toolbar items to the notebook page\n */\nconst launchButtons = {\n    id: '@retrolab/lab-extension:interface-switcher',\n    autoStart: true,\n    optional: [\n        INotebookTracker,\n        ICommandPalette,\n        IMainMenu,\n        IRetroShell,\n        ILabShell\n    ],\n    activate: (app, notebookTracker, palette, menu, retroShell, labShell) => {\n        if (!notebookTracker) {\n            // to prevent showing the toolbar button in RetroLab\n            return;\n        }\n        const { commands, shell } = app;\n        const baseUrl = PageConfig.getBaseUrl();\n        const isEnabled = () => {\n            return (notebookTracker.currentWidget !== null &&\n                notebookTracker.currentWidget === shell.currentWidget);\n        };\n        const addInterface = (option) => {\n            const { command, icon, buttonLabel, commandLabel, urlPrefix } = option;\n            commands.addCommand(command, {\n                label: args => (args.noLabel ? '' : commandLabel),\n                caption: commandLabel,\n                icon,\n                execute: () => {\n                    const current = notebookTracker.currentWidget;\n                    if (!current) {\n                        return;\n                    }\n                    window.open(`${urlPrefix}${current.context.path}`);\n                },\n                isEnabled\n            });\n            if (palette) {\n                palette.addItem({ command, category: 'Other' });\n            }\n            if (menu) {\n                menu.viewMenu.addGroup([{ command }], 1);\n            }\n            notebookTracker.widgetAdded.connect(async (sender, panel) => {\n                panel.toolbar.insertBefore('kernelName', buttonLabel, new CommandToolbarButton({\n                    commands,\n                    id: command,\n                    args: { noLabel: 1 }\n                }));\n                await panel.context.ready;\n                commands.notifyCommandChanged();\n            });\n        };\n        // always add Classic\n        addInterface({\n            command: 'retrolab:open-classic',\n            commandLabel: 'Open in Classic Notebook',\n            buttonLabel: 'openClassic',\n            icon: jupyterIcon,\n            urlPrefix: `${baseUrl}tree/`\n        });\n        if (!retroShell) {\n            addInterface({\n                command: 'retrolab:open-retro',\n                commandLabel: 'Open in RetroLab',\n                buttonLabel: 'openRetro',\n                icon: retroSunIcon,\n                urlPrefix: `${baseUrl}retro/tree/`\n            });\n        }\n        if (!labShell) {\n            addInterface({\n                command: 'retrolab:open-lab',\n                commandLabel: 'Open in JupyterLab',\n                buttonLabel: 'openLab',\n                icon: jupyterFaviconIcon,\n                urlPrefix: `${baseUrl}doc/tree/`\n            });\n        }\n    }\n};\n/**\n * A plugin to add a command to open the RetroLab Tree.\n */\nconst launchRetroTree = {\n    id: '@retrolab/lab-extension:launch-retrotree',\n    autoStart: true,\n    requires: [ITranslator],\n    optional: [IMainMenu, ICommandPalette],\n    activate: (app, translator, menu, palette) => {\n        const { commands } = app;\n        const trans = translator.load('jupyterlab');\n        const category = trans.__('Help');\n        commands.addCommand(CommandIDs.launchRetroTree, {\n            label: trans.__('Launch RetroLab File Browser'),\n            execute: () => {\n                window.open(PageConfig.getBaseUrl() + 'retro/tree');\n            }\n        });\n        if (menu) {\n            const helpMenu = menu.helpMenu;\n            helpMenu.addGroup([{ command: CommandIDs.launchRetroTree }], 1);\n        }\n        if (palette) {\n            palette.addItem({ command: CommandIDs.launchRetroTree, category });\n        }\n    }\n};\n/**\n * Export the plugins as default.\n */\nconst plugins = [launchRetroTree, launchButtons];\nexport default plugins;\n"],"sourceRoot":""}