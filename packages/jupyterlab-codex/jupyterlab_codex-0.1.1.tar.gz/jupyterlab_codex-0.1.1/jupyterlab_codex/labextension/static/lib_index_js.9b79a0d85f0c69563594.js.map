{"version":3,"file":"lib_index_js.9b79a0d85f0c69563594.js","mappings":";;;;;;;;;;;;;;;;AAAuC;AAChC;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACO;AACP;AACA;AACO;AACP;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA,SAAS;AACT;AACA,2BAA2B,oDAAU;AACrC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uFAAuF,MAAM;AAC7F;AACA;;;;;;;;;;;;;;;;;;;ACxC+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;AClCO;;;;;;;;;;;;;;;;;;ACAwD;AACd;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,yEAAgB;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,0DAAoB;AACnF;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;ACtBkC;AACH;AACD;AAChB;AACiD;AAC9E;AACP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA,sBAAsB,8DAAO;AAC7B;AACA,wBAAwB,6CAAU;AAClC,aAAa;AACb;AACA,kCAAkC,oDAAY;AAC9C,+BAA+B,+DAAuB;AACtD;AACA;AACA;AACA;AACA;AACA,uBAAuB,0DAAkB;AACzC,aAAa;AACb,SAAS;AACT;AACA,mBAAmB,kEAAkB;AACrC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA","sources":["webpack://jupyterlab-codex/./lib/codex.js","webpack://jupyterlab-codex/./lib/handler.js","webpack://jupyterlab-codex/./lib/icon.js","webpack://jupyterlab-codex/./lib/index.js","webpack://jupyterlab-codex/./lib/toolbar.js"],"sourcesContent":["import { requestAPI } from './handler';\nexport function getCodeCells(notebook) {\n    const codeCells = [];\n    notebook.widgets.forEach((cell) => {\n        if (cell.model.type === 'code' && notebook.isSelectedOrActive(cell)) {\n            codeCells.push(cell);\n        }\n    });\n    return codeCells;\n}\nexport function getCodeCellTextAsPrompt(codeCells) {\n    return codeCells.map((cell) => cell.model.value.text).join('\\n');\n}\nexport async function generateCodeInCell(codeCell, prompt, config) {\n    try {\n        if (!config) {\n            throw new Error('Codex config is not defined');\n        }\n        const payload = Object.assign({}, config, {\n            prompt,\n        });\n        console.log(payload);\n        const data = await requestAPI('completion', {\n            method: 'POST',\n            body: JSON.stringify(payload),\n        });\n        console.log(data);\n        if (data.choices && data.choices.length > 0) {\n            const texts = data.choices[0].text.split('\\n');\n            for (const text of texts) {\n                codeCell.model.value.text += text;\n                codeCell.model.value.text += '\\n';\n                // sleep displayLineTimeout ms\n                await new Promise(resolve => setTimeout(resolve, config.displayLineTimeout));\n            }\n        }\n    }\n    catch (error) {\n        console.error(`The jupyterlab_codex server extension appears to be missing.\\n${error}`);\n    }\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupyterlab-codex', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","export const CODEX_ICON = '<svg viewBox=\"0 0 320 364\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><linearGradient id=\"a\" gradientUnits=\"userSpaceOnUse\" x1=\"131.52\" x2=\"188.48\" y1=\"70.77\" y2=\"169.42\"><stop offset=\"0\" stop-color=\"#b6facf\"></stop><stop offset=\".12\" stop-color=\"#bfe5ff\"></stop><stop offset=\".28\" stop-color=\"#d6d6ff\"></stop><stop offset=\".48\" stop-color=\"#ffc5f4\"></stop><stop offset=\".65\" stop-color=\"#ffdcbd\"></stop><stop offset=\".83\" stop-color=\"#d7f5ae\"></stop><stop offset=\"1\" stop-color=\"#b6facf\"></stop></linearGradient><linearGradient id=\"b\" x1=\"118.15\" x2=\"201.86\" xlink:href=\"#a\" y1=\"109.49\" y2=\"254.49\"></linearGradient><linearGradient id=\"c\" x1=\"131.52\" x2=\"188.48\" xlink:href=\"#a\" y1=\"194.58\" y2=\"293.23\"></linearGradient><path d=\"m309.44 83.52-138.88-80.18a21.13 21.13 0 0 0 -21.12 0l-138.88 80.18a21.15 21.15 0 0 0 -10.56 18.3v160.36a21.15 21.15 0 0 0 10.56 18.3l138.88 80.18a21.13 21.13 0 0 0 21.12 0l138.88-80.18a21.15 21.15 0 0 0 10.56-18.3v-160.36a21.15 21.15 0 0 0 -10.56-18.3z\" fill=\"#0f0f1c\"></path><path d=\"m54.48 123 95.6-55.19c5.38-3.11 14.46-3.11 19.84 0l95.6 55.19a3.41 3.41 0 0 0 1.68.45 3.36 3.36 0 0 0 1.68-6.27l-95.59-55.18c-7.45-4.3-19.13-4.3-26.58 0l-95.59 55.2a3.36 3.36 0 1 0 3.36 5.8z\" fill=\"url(#a)\"></path><path d=\"m270.54 150.73a1.65 1.65 0 0 0 -.06-.32c0-.1 0-.21-.07-.31a.91.91 0 0 0 -.11-.3 3.09 3.09 0 0 0 -.14-.32l-.05-.11-.11-.15c-.07-.1-.13-.2-.21-.3l-.22-.23-.24-.23-.29-.2-.16-.12-95.59-55.14c-7.45-4.3-19.13-4.3-26.58 0l-95.59 55.19a3.36 3.36 0 1 0 3.36 5.81l95.6-55.19c5.38-3.1 14.46-3.1 19.84 0l90.56 52.28-20.08 11.61-67.11-38.8c-7.45-4.3-19.13-4.3-26.58 0l-95.59 55.19a3.36 3.36 0 0 0 1.68 6.27 3.31 3.31 0 0 0 1.68-.45l95.6-55.19c5.38-3.11 14.46-3.11 19.84 0l63.76 36.81-20.08 11.59-40.31-23.28c-7.45-4.3-19.13-4.3-26.58 0l-95.59 55.16a.91.91 0 0 0 -.16.11 1.94 1.94 0 0 0 -.29.21l-.24.22-.22.24-.21.29c0 .05-.08.1-.11.16v.1a3.09 3.09 0 0 0 -.14.32c0 .1-.08.2-.11.3s0 .21-.07.31a1.91 1.91 0 0 0 -.06.33v.64a1.65 1.65 0 0 0 .06.32c0 .1 0 .21.07.31a.91.91 0 0 0 .11.3 3.09 3.09 0 0 0 .14.32v.11a.55.55 0 0 1 .08.1 2.69 2.69 0 0 0 .39.5l.14.16a4 4 0 0 0 .62.47l95.56 55.18a29 29 0 0 0 26.58 0l95.59-55.19a3.36 3.36 0 0 0 -3.36-5.82l-95.6 55.19c-5.38 3.1-14.46 3.1-19.84 0l-90.53-52.18 20.08-11.6 67.11 38.75a29 29 0 0 0 26.58 0l95.59-55.15a3.36 3.36 0 0 0 -3.36-5.82l-95.6 55.19c-5.38 3.11-14.46 3.11-19.84 0l-63.76-36.85 20.08-11.59 40.31 23.28a29 29 0 0 0 26.58 0l95.56-55.21a3.16 3.16 0 0 0 .62-.47 1 1 0 0 0 .14-.15 2.69 2.69 0 0 0 .39-.5.79.79 0 0 0 .08-.11l.05-.1a3.09 3.09 0 0 0 .14-.32c0-.1.08-.2.11-.3s.05-.21.07-.31a1.91 1.91 0 0 0 .06-.33v-.32c0-.11 0-.25 0-.36zm-100.62 52.6c-5.38 3.11-14.46 3.11-19.84 0l-37-21.33 37-21.33c5.38-3.11 14.46-3.11 19.84 0l37 21.33z\" fill=\"url(#b)\"></path><path d=\"m265.52 241-95.6 55.19c-5.38 3.11-14.46 3.11-19.84 0l-95.6-55.19a3.36 3.36 0 1 0 -3.36 5.82l95.59 55.18a29 29 0 0 0 26.58 0l95.59-55.2a3.36 3.36 0 0 0 -3.36-5.82z\" fill=\"url(#c)\"></path></svg>';\n","import { ISettingRegistry } from '@jupyterlab/settingregistry';\nimport { CodexButtonExtension } from './toolbar';\n/**\n * Initialization data for the jupyterlab-codex extension.\n */\nconst plugin = {\n    id: 'jupyterlab-codex:plugin',\n    autoStart: true,\n    optional: [ISettingRegistry],\n    activate: async (app, settingRegistry) => {\n        try {\n            console.log('JupyterLab extension jupyterlab-codex is activated!');\n            if (!settingRegistry) {\n                throw new Error('No setting registry');\n            }\n            app.docRegistry.addWidgetExtension('Notebook', new CodexButtonExtension(plugin.id, settingRegistry));\n        }\n        catch (err) {\n            console.error('Failed to load settings for jupyterlab-codex.', err);\n        }\n    },\n};\nexport default plugin;\n","import { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport { CODEX_ICON } from './icon';\nimport { generateCodeInCell, getCodeCells, getCodeCellTextAsPrompt, } from './codex';\nexport class CodexButtonExtension {\n    constructor(pluginId, settingRegistry) {\n        this.pluginId = pluginId;\n        this.settingRegistry = settingRegistry;\n        this.settingRegistry.load(this.pluginId).then(settings => {\n            settings.changed.connect(this.updateConfig.bind(this));\n            this.updateConfig(settings);\n        });\n    }\n    createNew(widget, context) {\n        const button = new ToolbarButton({\n            tooltip: 'Codex It!',\n            icon: new LabIcon({\n                name: 'codex',\n                svgstr: CODEX_ICON,\n            }),\n            onClick: async () => {\n                const codeCells = getCodeCells(widget.content);\n                const prompt = getCodeCellTextAsPrompt(codeCells);\n                if (codeCells.length < 1) {\n                    return;\n                }\n                //get last code cell\n                const lastCodeCell = codeCells[codeCells.length - 1];\n                return generateCodeInCell(lastCodeCell, prompt, this.config);\n            },\n        });\n        widget.toolbar.insertAfter('cellType', 'codex', button);\n        return new DisposableDelegate(() => {\n            button.dispose();\n        });\n    }\n    updateConfig(settings) {\n        this.config = settings.composite;\n    }\n}\n"],"names":[],"sourceRoot":""}