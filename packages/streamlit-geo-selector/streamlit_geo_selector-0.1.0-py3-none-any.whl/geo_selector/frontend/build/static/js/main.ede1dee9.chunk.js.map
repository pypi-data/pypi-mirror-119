{"version":3,"sources":["index.tsx"],"names":["divMap","document","createElement","style","height","setAttribute","body","appendChild","center","L","firstClick","map","setView","maxZoom","addTo","redMarker","icon","markerColor","on","e","marker","unbindPopup","setLatLng","latlng","Streamlit","setComponentValue","addClass","getContainer","setIcon","console","log","bounds","toBounds","getBoundsZoom","getZoom","flyToBounds","getNorthWest","getSouthEast","panTo","openPopup","events","addEventListener","RENDER_EVENT","event","setFrameHeight","setComponentReady"],"mappings":"8KAAA,iCAQMA,GARN,YAQeC,SAASC,cAAc,QACtCF,EAAOG,MAAMC,OAAS,QACtBJ,EAAOK,aAAa,KAAM,OAC1BJ,SAASK,KAAKC,YAAYP,GAG1B,IAAIQ,EAAS,IAAIC,SAAS,OAAQ,OAC9BC,GAAa,EAGXC,EAAMF,MAAM,OAAOG,QAAQJ,EAAQ,GAGzCC,YACE,oDAAqD,CACnDI,QAAS,KACRC,MAAMH,GAGX,IAAII,EAAYN,iBAAiBO,KAAK,CACpCA,KAAM,MACNC,YAAa,QAGfN,EAAIO,GAAG,SAmBP,SAAoBC,GAClBC,EAAOC,cAEPD,EAAOE,UAAUH,EAAEI,QACnBC,IAAUC,kBAAkBN,EAAEI,QAE1Bb,IACFU,EAAON,MAAMH,GACbD,GAAa,MA1BjBD,UAAUiB,SAASf,EAAIgB,eAAgB,4BAEvC,IAAIP,EAASX,SAASD,GAAQoB,QAAQb,GACtCK,EAAOF,GAAG,SAEV,SAAqBC,GACnBU,QAAQC,IAAI,eACZ,IAAIC,EAASZ,EAAEI,OAAOS,SAAS,MAC3BrB,EAAIsB,cAAcF,GAAUpB,EAAIuB,WAClCL,QAAQC,IAAI,eACZnB,EAAIwB,YAAY,CAACJ,EAAOK,eAAgBL,EAAOM,mBAE/CR,QAAQC,IAAI,cACZnB,EAAI2B,MAAMnB,EAAEI,SAEdH,EAAOmB,eAqCTf,IAAUgB,OAAOC,iBAAiBjB,IAAUkB,cAhB5C,SAAkBC,GAYhBnB,IAAUoB,oBAQZpB,IAAUqB,oBAIVrB,IAAUoB,mB","file":"static/js/main.ede1dee9.chunk.js","sourcesContent":["import { Streamlit } from \"streamlit-component-lib\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport * as L from \"leaflet\";\r\nimport \"leaflet.awesome-markers/dist/leaflet.awesome-markers.css\"\r\nimport \"leaflet.awesome-markers\"\r\n\r\n// Add text and a button to the DOM. (You could also add these directly\r\n// to index.html.)\r\nconst divMap = document.createElement(\"div\")\r\ndivMap.style.height = \"600px\"\r\ndivMap.setAttribute(\"id\", \"map\")\r\ndocument.body.appendChild(divMap)\r\n\r\n// center of the map\r\nvar center = new L.LatLng(37.09, -95.71);\r\nvar firstClick = true;\r\n\r\n// Create the map\r\nconst map = L.map('map').setView(center, 4);\r\n\r\n// Set up the OSM layer\r\nL.tileLayer(\r\n  'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\r\n    maxZoom: 18\r\n  }).addTo(map);\r\n\r\n//Create markers\r\nvar redMarker = L.AwesomeMarkers.icon({\r\n  icon: 'map',\r\n  markerColor: 'red'\r\n});\r\n\r\nmap.on('click', moveMarker);\r\nL.DomUtil.addClass(map.getContainer(), 'crosshair-cursor-enabled');\r\n\r\nvar marker = L.marker(center).setIcon(redMarker); //.setZIndexOffset(-1000);\r\nmarker.on('click', markerClick);\r\n\r\nfunction markerClick(e: any) {\r\n  console.log('markerClick');\r\n  var bounds = e.latlng.toBounds(25000);\r\n  if (map.getBoundsZoom(bounds) > map.getZoom()) {\r\n    console.log('  fitbounds')\r\n    map.flyToBounds([bounds.getNorthWest(), bounds.getSouthEast()]);\r\n  } else {\r\n    console.log('  panpoint')\r\n    map.panTo(e.latlng);\r\n  }\r\n  marker.openPopup();\r\n}\r\n\r\nfunction moveMarker(e: any) {\r\n  marker.unbindPopup();\r\n  // Move marker to click location\r\n  marker.setLatLng(e.latlng);\r\n  Streamlit.setComponentValue(e.latlng);\r\n  // Add marker to map if not yet added\r\n  if (firstClick) {\r\n    marker.addTo(map);\r\n    firstClick = false;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * The component's render function. This will be called immediately after\r\n * the component is initially loaded, and then again every time the\r\n * component gets new data from Python.\r\n */\r\nfunction onRender(event: Event): void {\r\n  // Get the RenderData from the event\r\n  // const data = (event as CustomEvent<RenderData>).detail\r\n  // console.log(data);\r\n\r\n  \r\n\r\n\r\n  // We tell Streamlit to update our frameHeight after each render event, in\r\n  // case it has changed. (This isn't strictly necessary for the example\r\n  // because our height stays fixed, but this is a low-cost function, so\r\n  // there's no harm in doing it redundantly.)\r\n  Streamlit.setFrameHeight()\r\n}\r\n\r\n// Attach our `onRender` handler to Streamlit's render event.\r\nStreamlit.events.addEventListener(Streamlit.RENDER_EVENT, onRender)\r\n\r\n// Tell Streamlit we're ready to start receiving data. We won't get our\r\n// first RENDER_EVENT until we call this function.\r\nStreamlit.setComponentReady()\r\n\r\n// Finally, tell Streamlit to update our initial height. We omit the\r\n// `height` parameter here to have it default to our scrollHeight.\r\nStreamlit.setFrameHeight()"],"sourceRoot":""}