{"version":3,"sources":["CookieManager.jsx","index.jsx"],"names":["CookieManager","state","componentDidMount","Streamlit","setComponentReady","Cookies","args","props","method","cookie","value","expires_at","output","setCookie","getCookie","getAllCookies","deleteCookie","setComponentValue","render","cookies","console","log","Date","set","path","samesite","expires","remove","getAll","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"qOAYMA,E,4MACJC,MAAQ,G,EACRC,kBAAoB,WAClBC,IAAUC,oBAEV,EAAKH,MAAL,QAAuB,IAAII,IAE3B,IAAQC,EAAS,EAAKC,MAAdD,KAEFE,EAASF,EAAI,OACbG,EAASH,EAAI,OACbI,EAAQJ,EAAI,MACZK,EAAaL,EAAI,WAEnBM,EAAS,KAEb,OAAQJ,GACN,IAAK,MACHI,EAAS,EAAKC,UAAUJ,EAAQC,EAAOC,GACvC,MACF,IAAK,MACHC,EAAS,EAAKE,UAAUL,GACxB,MACF,IAAK,SACHG,EAAS,EAAKG,gBACd,MACF,IAAK,SACHH,EAAS,EAAKI,aAAaP,GAM/BN,IAAUc,kBAAkBL,I,EAG9BM,OAAS,WACP,OAAO,+B,EAGTL,UAAY,SAACJ,EAAQC,EAAOC,GAC1B,IAAQQ,EAAY,EAAKlB,MAAjBkB,QAIR,OAHAC,QAAQC,IAAI,sBACZD,QAAQC,IAAI,IAAIC,KAAKX,IACrBQ,EAAQI,IAAId,EAAQC,EAAO,CAAEc,KAAM,IAAKC,SAAU,SAAUC,QAAS,IAAIJ,KAAKX,MACvE,G,EAGTG,UAAY,SAACL,GAGX,OAFoB,EAAKR,MAAjBkB,QACcA,QAAQV,I,EAIhCO,aAAe,SAACP,GAGd,OAFoB,EAAKR,MAAjBkB,QACAQ,OAAOlB,EAAQ,CAAEe,KAAM,IAAKC,SAAU,YACvC,G,EAGTV,cAAgB,WAEd,OADoB,EAAKd,MAAjBkB,QACOS,U,YA9DSC,KAkEbC,cAAwB9B,GC1EvC+B,IAASb,OACP,kBAAC,IAAMc,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.25bf105b.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React from 'react'\n\nimport Cookies from 'universal-cookie';\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass CookieManager extends StreamlitComponentBase<State> {\n  state = {}\n  componentDidMount = ()=>{\n    Streamlit.setComponentReady()\n  \n    this.state['cookies']= new Cookies(); \n    \n    const { args } = this.props\n\n    const method = args[\"method\"]\n    const cookie = args[\"cookie\"]\n    const value = args[\"value\"]\n    const expires_at = args[\"expires_at\"]\n\n    let output = null\n\n    switch (method) {\n      case \"set\":\n        output = this.setCookie(cookie, value, expires_at)\n        break\n      case \"get\":\n        output = this.getCookie(cookie)\n        break\n      case \"getAll\":\n        output = this.getAllCookies()\n        break\n      case \"delete\":\n        output = this.deleteCookie(cookie)\n        break\n      default:\n        break\n    }\n\n    Streamlit.setComponentValue(output)\n  }\n\n  render = () => {\n    return <div></div>\n  }\n\n  setCookie = (cookie, value, expires_at) => {\n    const { cookies } = this.state\n    console.log(\"Should exprire at:\")\n    console.log(new Date(expires_at))\n    cookies.set(cookie, value, { path: \"/\", samesite: \"strict\", expires: new Date(expires_at) })\n    return true\n  }\n\n  getCookie = (cookie) => {\n    const { cookies } = this.state\n    const value = cookies.cookies[cookie]\n    return value\n  }\n\n  deleteCookie = (cookie) => {\n    const { cookies } = this.state\n    cookies.remove(cookie, { path: \"/\", samesite: \"strict\" })\n    return true\n  }\n\n  getAllCookies = () => {\n    const { cookies } = this.state\n    return cookies.getAll()\n  }\n}\n\nexport default withStreamlitConnection(CookieManager)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport CookieManager from \"./CookieManager\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <CookieManager />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}