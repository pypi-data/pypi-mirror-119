
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/misc/plot_densities.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_misc_plot_densities.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_misc_plot_densities.py:


Bayesian Optimization as Density Ratio Estimation
=================================================

Hello world

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default

    import pandas as pd
    import numpy as np

    import matplotlib.pyplot as plt
    import seaborn as sns

    from bore_experiments.datasets import make_regression_dataset




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'rocket' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'rocket_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'mako' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'mako_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'icefire' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'icefire_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'vlag' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'vlag_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'flare' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'flare_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1582: UserWarning: Trying to register the cmap 'crest' which already exists.
      mpl_cm.register_cmap(_name, _cmap)
    /home/tiao/.virtualenvs/temp/lib/python3.9/site-packages/seaborn/cm.py:1583: UserWarning: Trying to register the cmap 'crest_r' which already exists.
      mpl_cm.register_cmap(_name + "_r", _cmap_r)




.. GENERATED FROM PYTHON SOURCE LINES 17-25

.. code-block:: default



    def latent(gamma):
        """
        Forrester's.
        """
        # return (6.0*gamma-2.0)**2 * np.sin(12.0 * gamma - 4.0)
        return np.sin(3.0*gamma) + gamma**2 - 0.7*gamma







.. GENERATED FROM PYTHON SOURCE LINES 26-40

.. code-block:: default



    # constants
    num_features = 1
    num_init_random = 64
    noise_variance = 0.2
    gamma = 1/3
    bandwidth = 0.25

    num_index_points = 512
    x_min, x_max = -1.0, 2.0

    seed = 8888  # set random seed for reproducibility
    random_state = np.random.RandomState(seed)







.. GENERATED FROM PYTHON SOURCE LINES 41-44

.. code-block:: default


    X = np.linspace(x_min, x_max, num_index_points).reshape(-1, num_features)
    y = latent(X)







.. GENERATED FROM PYTHON SOURCE LINES 45-55

.. code-block:: default


    fig, ax = plt.subplots()

    ax.plot(X, y, c="tab:gray")

    ax.set_xlabel(r'$x$')
    ax.set_ylabel(r"$y$ (test mse)")

    plt.show()




.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_001.png
    :alt: plot densities
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 56-63

.. code-block:: default


    load_observations = make_regression_dataset(latent)
    X_samples, y_samples = load_observations(num_samples=num_init_random,
                                             num_features=num_features,
                                             noise_variance=noise_variance,
                                             x_min=x_min, x_max=x_max,
                                             random_state=random_state)







.. GENERATED FROM PYTHON SOURCE LINES 64-74

.. code-block:: default


    tau = np.quantile(y_samples, q=gamma)
    mask_l = np.less(y_samples, tau)
    mask_g = ~mask_l

    X_samples_l = X_samples[mask_l]
    X_samples_g = X_samples[mask_g]

    y_samples_l = y_samples[mask_l]
    y_samples_g = y_samples[mask_g]







.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: default


    y_samples_sorted = np.sort(y_samples)
    y_samples_quantile = np.arange(num_init_random) / num_init_random







.. GENERATED FROM PYTHON SOURCE LINES 79-94

.. code-block:: default



    fig, ax = plt.subplots()

    ax.plot(X, y, c="tab:gray")

    ax.scatter(X_samples_l, y_samples_l, alpha=0.8)
    ax.scatter(X_samples_g, y_samples_g, alpha=0.8)

    ax.axhline(tau, xmin=0, xmax=1.0, color='k', linewidth=1.0, linestyle='dashed')

    ax.set_xlabel(r'$x$')
    ax.set_ylabel(r"$y$ (test mse)")

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_002.png
    :alt: plot densities
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 95-109

.. code-block:: default


    fig, ax = plt.subplots()

    sns.ecdfplot(x=y_samples, ax=ax)

    ax.axvline(tau, ymin=0., ymax=gamma,
               color="black", linestyle='dashed', linewidth=1.0)
    ax.hlines(gamma, xmin=y_samples.min(), xmax=tau,
              colors="black", linestyles='dashed', linewidth=1.0)

    ax.set_xlabel(r'$y$')
    ax.set_ylabel(r'$\Phi(y)$')

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_003.png
    :alt: plot densities
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 110-127

.. code-block:: default


    fig, ax = plt.subplots()

    sns.kdeplot(x=X_samples_l.ravel(), fill=True, bw_method=bandwidth,
                label=r'$\ell(x)$', ax=ax)
    sns.kdeplot(x=X_samples_g.ravel(), fill=True, bw_method=bandwidth,
                label=r'$g(x)$', ax=ax)

    sns.rugplot(X_samples_l.ravel(), ax=ax)
    sns.rugplot(X_samples_g.ravel(), ax=ax)

    ax.set_xlabel(r'$x$')
    ax.set_ylabel("density")

    ax.legend()

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_004.png
    :alt: plot densities
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 128-131

.. code-block:: default

    frame = pd.DataFrame(data=X_samples,
                         columns=['x']).assign(y=y_samples, z=mask_l)
    frame





.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>x</th>
          <th>y</th>
          <th>z</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.839056</td>
          <td>0.619062</td>
          <td>False</td>
        </tr>
        <tr>
          <th>1</th>
          <td>-0.901915</td>
          <td>1.012624</td>
          <td>False</td>
        </tr>
        <tr>
          <th>2</th>
          <td>1.779295</td>
          <td>1.146232</td>
          <td>False</td>
        </tr>
        <tr>
          <th>3</th>
          <td>1.148798</td>
          <td>0.712969</td>
          <td>False</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.144962</td>
          <td>0.375539</td>
          <td>False</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>59</th>
          <td>-0.072002</td>
          <td>-0.228443</td>
          <td>True</td>
        </tr>
        <tr>
          <th>60</th>
          <td>-0.677024</td>
          <td>-0.131214</td>
          <td>True</td>
        </tr>
        <tr>
          <th>61</th>
          <td>1.144504</td>
          <td>0.381161</td>
          <td>False</td>
        </tr>
        <tr>
          <th>62</th>
          <td>0.140415</td>
          <td>0.134704</td>
          <td>True</td>
        </tr>
        <tr>
          <th>63</th>
          <td>1.092248</td>
          <td>0.318884</td>
          <td>False</td>
        </tr>
      </tbody>
    </table>
    <p>64 rows Ã— 3 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 132-134

.. code-block:: default

    g = sns.displot(data=frame, x='x', hue='z', rug=True, kind="kde",
                    fill=True, bw_method=bandwidth)



.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_005.png
    :alt: plot densities
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 135-150

.. code-block:: default

    g = sns.JointGrid(height=6, ratio=2, space=.05, marginal_ticks=True)

    g.ax_joint.plot(X, y, c="tab:gray")
    sns.scatterplot(data=frame, x='x', y='y', hue='z', ax=g.ax_joint)
    g.ax_joint.axhline(tau, xmin=0., xmax=1., color='k',
                       linewidth=1.0, linestyle='dashed')

    sns.ecdfplot(data=frame, y='y', ax=g.ax_marg_y)
    g.ax_marg_y.vlines(gamma, ymin=y_samples.min(), ymax=tau, colors="black",
                       linestyles='dashed', linewidth=1.)
    g.ax_marg_y.axhline(tau, xmin=0., xmax=gamma, color="black",
                        linestyle='dashed', linewidth=1.)

    sns.kdeplot(data=frame, x='x', hue='z', fill=True, legend=False, ax=g.ax_marg_x)
    sns.rugplot(data=frame, x='x', hue='z', legend=False, ax=g.ax_marg_x)



.. image:: /auto_examples/misc/images/sphx_glr_plot_densities_006.png
    :alt: plot densities
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:xlabel='x', ylabel='Density'>




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  11.364 seconds)


.. _sphx_glr_download_auto_examples_misc_plot_densities.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_densities.py <plot_densities.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_densities.ipynb <plot_densities.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
