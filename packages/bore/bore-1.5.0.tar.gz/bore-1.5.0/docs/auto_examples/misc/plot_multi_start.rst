
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/misc/plot_multi_start.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_misc_plot_multi_start.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_misc_plot_multi_start.py:


Multi-start Newton hill-climbing optimization
=============================================

Hello world

.. GENERATED FROM PYTHON SOURCE LINES 8-20

.. code-block:: default

    import tensorflow as tf
    import numpy as np

    import matplotlib.pyplot as plt

    from matplotlib.colors import LogNorm
    from mpl_toolkits.mplot3d import Axes3D

    from scipy.optimize import Bounds

    from bore.optimizers import minimize_multi_start
    from bore.decorators import value_and_gradient, numpy_io, unstack







.. GENERATED FROM PYTHON SOURCE LINES 22-36

.. code-block:: default


    # constants
    # num_index_points = 128
    y_min, y_max = 0, 15
    x_min, x_max = -5, 10

    y, x = np.ogrid[y_min:y_max:200j, x_min:x_max:200j]
    X, Y = np.broadcast_arrays(x, y)

    num_starts = 20
    num_samples = 1024

    seed = 8888  # set random seed for reproducibility
    random_state = np.random.RandomState(seed)







.. GENERATED FROM PYTHON SOURCE LINES 37-42

.. code-block:: default



    def branin(x, y, a=1.0, b=5.1/(4*np.pi**2), c=5.0/np.pi, r=6.0, s=10.0,
               t=1.0/(8*np.pi)):
        return a*(y - b * x**2 + c*x - r)**2 + s*(1 - t)*tf.cos(x) + s







.. GENERATED FROM PYTHON SOURCE LINES 43-51

.. code-block:: default



    # def currin(x1, x2):

    #     a = 2300*x1**3 + 1900*x1**2 + 2092*x1 + 60
    #     b = 100*x1**3 + 500*x1**2 + 4*x1 + 20
    #     c = 1 - tf.exp(-0.5/x2)
    #     return c * a / b







.. GENERATED FROM PYTHON SOURCE LINES 52-61

.. code-block:: default

    fig, ax = plt.subplots()

    ax.contour(X, Y, branin(x, y), levels=np.logspace(0, 5, 35), norm=LogNorm(),
               cmap="Spectral_r")

    ax.set_xlabel(r"$x_1$")
    ax.set_ylabel(r"$x_2$")

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_multi_start_001.png
    :alt: plot multi start
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 62-71

.. code-block:: default

    fig, ax = plt.subplots(subplot_kw=dict(projection="3d", azim=-135, elev=35))

    ax.plot_surface(x, y, branin(x, y), edgecolor='k', linewidth=0.5, cmap="Spectral_r")

    ax.set_xlabel(r"$x_1$")
    ax.set_ylabel(r"$x_2$")
    ax.set_zlabel(r"$y$")

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_multi_start_002.png
    :alt: plot multi start
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 72-80

.. code-block:: default



    @numpy_io
    @value_and_gradient
    @unstack
    def func(x1, x2):

        return branin(x1, x2)







.. GENERATED FROM PYTHON SOURCE LINES 81-82

.. code-block:: default

    print(func(np.zeros(shape=(50, 2))))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264,
           55.60211264, 55.60211264, 55.60211264, 55.60211264, 55.60211264]), array([[-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ],
           [-19.09859317, -12.        ]])]




.. GENERATED FROM PYTHON SOURCE LINES 83-84

.. code-block:: default

    print(func(np.zeros(2)))




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [55.602112642270264, array([-19.09859317, -12.        ])]




.. GENERATED FROM PYTHON SOURCE LINES 85-93

.. code-block:: default


    bounds = Bounds(lb=[x_min, y_min], ub=[x_max, y_max])
    results = minimize_multi_start(func, bounds,
                                   num_starts=num_starts,
                                   num_samples=num_samples,
                                   method="L-BFGS-B", jac=True,
                                   options=dict(maxiter=100, ftol=1e-2),
                                   random_state=random_state)







.. GENERATED FROM PYTHON SOURCE LINES 94-95

.. code-block:: default

    len(results)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    20



.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default


    U = np.vstack([res.x for res in results])
    v = np.hstack([res.fun for res in results])







.. GENERATED FROM PYTHON SOURCE LINES 100-111

.. code-block:: default


    fig, ax = plt.subplots()

    ax.scatter(*U.T, c=v, alpha=0.6, cmap="crest")
    ax.contour(X, Y, branin(x, y), levels=np.logspace(0, 5, 35), norm=LogNorm(),
               cmap="crest")

    ax.set_xlabel(r"$x_1$")
    ax.set_ylabel(r"$x_2$")

    plt.show()



.. image:: /auto_examples/misc/images/sphx_glr_plot_multi_start_003.png
    :alt: plot multi start
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 112-115

.. code-block:: default


    res_best = min(filter(lambda res: res.success, results), key=lambda res: res.fun)
    res_best




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


          fun: 0.39788735773261585
     hess_inv: <2x2 LbfgsInvHessProduct with dtype=float64>
          jac: array([ 7.63566316e-06, -2.66692130e-07])
      message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'
         nfev: 6
          nit: 4
         njev: 6
       status: 0
      success: True
            x: array([9.42477873, 2.47500052])



.. GENERATED FROM PYTHON SOURCE LINES 116-117

Borehole

.. GENERATED FROM PYTHON SOURCE LINES 117-131

.. code-block:: default



    @numpy_io
    @value_and_gradient
    @unstack
    def borehole(rw, r, Tu, Hu, Tl, Hl, L, Kw):

        g = tf.math.log(r) - tf.math.log(rw)
        h = 1.0 + 2.0 * L * Tu / (g * rw**2 * Kw) + Tu / Tl

        ret = 2.0 * np.pi * Tu * (Hu - Hl)
        ret /= g * h

        return - ret







.. GENERATED FROM PYTHON SOURCE LINES 132-136

.. code-block:: default



    low = [0.05, 100, 63070, 990, 63.1, 700, 1120, 9855]
    high = [0.15, 50000, 115600, 1110, 116, 820, 1680, 12045]







.. GENERATED FROM PYTHON SOURCE LINES 137-144

.. code-block:: default


    bounds = Bounds(lb=low, ub=high)
    results = minimize_multi_start(borehole, bounds,
                                   num_starts=num_starts,
                                   num_samples=num_samples,
                                   method="L-BFGS-B", jac=True,
                                   random_state=random_state)







.. GENERATED FROM PYTHON SOURCE LINES 145-147

.. code-block:: default

    U = np.vstack([res.x for res in results])
    v = np.hstack([res.fun for res in results])







.. GENERATED FROM PYTHON SOURCE LINES 148-149

.. code-block:: default

    v




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([-307.89682082, -308.23654661, -307.60829823, -307.81732475,
           -307.67629212, -308.11105196, -307.70865688, -308.46623986,
           -309.57547013, -307.91996341, -307.60767058, -307.59540502,
           -307.59209612, -308.29012122, -307.62503623, -309.57527421,
           -309.57397397, -307.71352611, -307.81251389, -307.8068053 ])



.. GENERATED FROM PYTHON SOURCE LINES 150-152

.. code-block:: default

    res_best = min(filter(lambda res: res.success, results), key=lambda res: res.fun)
    res_best




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


          fun: -309.57547013048185
     hess_inv: <8x8 LbfgsInvHessProduct with dtype=float64>
          jac: array([-4.10197921e+03,  3.21049057e-03, -2.01922202e-08, -7.55062122e-01,
           -1.79771038e-02,  7.55062122e-01,  2.74542782e-01, -2.55282620e-02])
      message: 'CONVERGENCE: NORM_OF_PROJECTED_GRADIENT_<=_PGTOL'
         nfev: 34
          nit: 8
         njev: 34
       status: 0
      success: True
            x: array([1.50000000e-01, 1.00000000e+02, 1.09452532e+05, 1.11000000e+03,
           1.16000000e+02, 7.00000000e+02, 1.12000000e+03, 1.20450000e+04])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.650 seconds)


.. _sphx_glr_download_auto_examples_misc_plot_multi_start.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_multi_start.py <plot_multi_start.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_multi_start.ipynb <plot_multi_start.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
