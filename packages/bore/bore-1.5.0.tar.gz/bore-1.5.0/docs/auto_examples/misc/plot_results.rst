
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/misc/plot_results.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_misc_plot_results.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_misc_plot_results.py:


Results
=======

Hello world

.. GENERATED FROM PYTHON SOURCE LINES 8-16

.. code-block:: default


    import pandas as pd

    import seaborn as sns
    import matplotlib.pyplot as plt

    from bore.utils import load_runs
    from pathlib import Path


.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/tiao/Repositories/bore/examples/misc/plot_results.py", line 15, in <module>
        from bore.utils import load_runs
    ModuleNotFoundError: No module named 'bore.utils'




.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default


    # constants
    num_runs = 20
    error_min = -3.32237
    optimizers = ["random", "tpe", "bore", "gamma15", "borefast"]
    base_dir = Path("../../results")

.. GENERATED FROM PYTHON SOURCE LINES 25-31

.. code-block:: default

    frames = []

    for optimizer in optimizers:

        frame = load_runs(base_dir.joinpath(optimizer), runs=num_runs, error_min=error_min)
        frames.append(frame.assign(optimizer=optimizer))

.. GENERATED FROM PYTHON SOURCE LINES 32-34

.. code-block:: default

    data = pd.concat(frames, axis="index", ignore_index=True, sort=True)
    data.rename(lambda s: s.replace('_', ' '), axis="columns", inplace=True)

.. GENERATED FROM PYTHON SOURCE LINES 35-37

Random Search
-------------

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: default

    g = sns.relplot(x="task", y="regret", hue="epoch",
                    col="run", col_wrap=4, palette="Dark2",
                    alpha=0.6, kind="scatter", data=data.query("optimizer == 'random'"))
    g.map(plt.plot, "task", "regret best", color="k", linewidth=2.0, alpha=0.8)
    g.set_axis_labels("iteration", "regret")
    # g.set(xscale="log", yscale="log")

.. GENERATED FROM PYTHON SOURCE LINES 44-46

Tree Parzen Estimator (TPE)
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: default

    g = sns.relplot(x="task", y="regret", hue="epoch",
                    col="run", col_wrap=4, palette="Dark2",
                    alpha=0.6, kind="scatter", data=data.query("optimizer == 'tpe'"))
    g.map(plt.plot, "task", "regret best", color="k", linewidth=2.0, alpha=0.8)
    g.set_axis_labels("iteration", "regret")
    # g.set(xscale="log", yscale="log")

.. GENERATED FROM PYTHON SOURCE LINES 53-55

BO via Density Ratio Estimation (BORE)
--------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 55-61

.. code-block:: default

    g = sns.relplot(x="task", y="regret", hue="epoch",
                    col="run", col_wrap=4, palette="Dark2",
                    alpha=0.6, kind="scatter", data=data.query("optimizer == 'bore'"))
    g.map(plt.plot, "task", "regret best", color="k", linewidth=2.0, alpha=0.8)
    g.set_axis_labels("iteration", "regret")
    # g.set(xscale="log", yscale="log")

.. GENERATED FROM PYTHON SOURCE LINES 62-69

.. code-block:: default

    g = sns.relplot(x="task", y="regret", hue="run",
                    col="optimizer", palette="tab20",
                    alpha=0.6, kind="scatter", data=data)
    g.map(sns.lineplot, "task", "regret best", "run",
          palette="tab20", linewidth=2.0, alpha=0.8)
    g.set_axis_labels("iteration", "regret")
    # g.set(xscale="log", yscale="log")

.. GENERATED FROM PYTHON SOURCE LINES 70-83

.. code-block:: default

    fig, ax = plt.subplots()

    sns.lineplot(x="task", y="regret best", hue="optimizer",
                 ci="sd", data=data, ax=ax)

    ax.set_xlabel("iteration")
    ax.set_ylabel("incumbent regret")

    ax.set_xscale("log")
    ax.set_yscale("log")
    ax.set_ylim(1e-1, -error_min)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.016 seconds)


.. _sphx_glr_download_auto_examples_misc_plot_results.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_results.py <plot_results.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_results.ipynb <plot_results.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
