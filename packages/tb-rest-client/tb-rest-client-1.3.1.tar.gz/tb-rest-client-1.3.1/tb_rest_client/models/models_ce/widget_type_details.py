# coding: utf-8

"""
    ThingsBoard REST API

    For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.  # noqa: E501

    OpenAPI spec version: 2.0
    Contact: info@thingsboard.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WidgetTypeDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'str',
        'bundle_alias': 'str',
        'created_time': 'int',
        'description': 'str',
        'descriptor': 'str',
        'id': 'WidgetTypeId',
        'image': 'str',
        'name': 'str',
        'tenant_id': 'TenantId'
    }

    attribute_map = {
        'alias': 'alias',
        'bundle_alias': 'bundleAlias',
        'created_time': 'createdTime',
        'description': 'description',
        'descriptor': 'descriptor',
        'id': 'id',
        'image': 'image',
        'name': 'name',
        'tenant_id': 'tenantId'
    }

    def __init__(self, alias=None, bundle_alias=None, created_time=None, description=None, descriptor=None, id=None, image=None, name=None, tenant_id=None):  # noqa: E501
        """WidgetTypeDetails - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._bundle_alias = None
        self._created_time = None
        self._description = None
        self._descriptor = None
        self._id = None
        self._image = None
        self._name = None
        self._tenant_id = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if bundle_alias is not None:
            self.bundle_alias = bundle_alias
        if created_time is not None:
            self.created_time = created_time
        if description is not None:
            self.description = description
        if descriptor is not None:
            self.descriptor = descriptor
        if id is not None:
            self.id = id
        if image is not None:
            self.image = image
        if name is not None:
            self.name = name
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def alias(self):
        """Gets the alias of this WidgetTypeDetails.  # noqa: E501


        :return: The alias of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this WidgetTypeDetails.


        :param alias: The alias of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._alias = alias

    @property
    def bundle_alias(self):
        """Gets the bundle_alias of this WidgetTypeDetails.  # noqa: E501


        :return: The bundle_alias of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._bundle_alias

    @bundle_alias.setter
    def bundle_alias(self, bundle_alias):
        """Sets the bundle_alias of this WidgetTypeDetails.


        :param bundle_alias: The bundle_alias of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._bundle_alias = bundle_alias

    @property
    def created_time(self):
        """Gets the created_time of this WidgetTypeDetails.  # noqa: E501


        :return: The created_time of this WidgetTypeDetails.  # noqa: E501
        :rtype: int
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this WidgetTypeDetails.


        :param created_time: The created_time of this WidgetTypeDetails.  # noqa: E501
        :type: int
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this WidgetTypeDetails.  # noqa: E501


        :return: The description of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WidgetTypeDetails.


        :param description: The description of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def descriptor(self):
        """Gets the descriptor of this WidgetTypeDetails.  # noqa: E501


        :return: The descriptor of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this WidgetTypeDetails.


        :param descriptor: The descriptor of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._descriptor = descriptor

    @property
    def id(self):
        """Gets the id of this WidgetTypeDetails.  # noqa: E501


        :return: The id of this WidgetTypeDetails.  # noqa: E501
        :rtype: WidgetTypeId
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WidgetTypeDetails.


        :param id: The id of this WidgetTypeDetails.  # noqa: E501
        :type: WidgetTypeId
        """

        self._id = id

    @property
    def image(self):
        """Gets the image of this WidgetTypeDetails.  # noqa: E501


        :return: The image of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this WidgetTypeDetails.


        :param image: The image of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def name(self):
        """Gets the name of this WidgetTypeDetails.  # noqa: E501


        :return: The name of this WidgetTypeDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WidgetTypeDetails.


        :param name: The name of this WidgetTypeDetails.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tenant_id(self):
        """Gets the tenant_id of this WidgetTypeDetails.  # noqa: E501


        :return: The tenant_id of this WidgetTypeDetails.  # noqa: E501
        :rtype: TenantId
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this WidgetTypeDetails.


        :param tenant_id: The tenant_id of this WidgetTypeDetails.  # noqa: E501
        :type: TenantId
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WidgetTypeDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WidgetTypeDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
