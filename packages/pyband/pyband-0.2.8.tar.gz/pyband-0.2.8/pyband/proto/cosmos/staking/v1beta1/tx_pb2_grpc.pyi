"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc

from .tx_pb2 import *
# Msg defines the staking Msg service.
class MsgStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # CreateValidator defines a method for creating a new validator.
    CreateValidator:grpc.UnaryUnaryMultiCallable[
        global___MsgCreateValidator,
        global___MsgCreateValidatorResponse] = ...

    # EditValidator defines a method for editing an existing validator.
    EditValidator:grpc.UnaryUnaryMultiCallable[
        global___MsgEditValidator,
        global___MsgEditValidatorResponse] = ...

    # Delegate defines a method for performing a delegation of coins
    # from a delegator to a validator.
    Delegate:grpc.UnaryUnaryMultiCallable[
        global___MsgDelegate,
        global___MsgDelegateResponse] = ...

    # BeginRedelegate defines a method for performing a redelegation
    # of coins from a delegator and source validator to a destination validator.
    BeginRedelegate:grpc.UnaryUnaryMultiCallable[
        global___MsgBeginRedelegate,
        global___MsgBeginRedelegateResponse] = ...

    # Undelegate defines a method for performing an undelegation from a
    # delegate and a validator.
    Undelegate:grpc.UnaryUnaryMultiCallable[
        global___MsgUndelegate,
        global___MsgUndelegateResponse] = ...


# Msg defines the staking Msg service.
class MsgServicer(metaclass=abc.ABCMeta):
    # CreateValidator defines a method for creating a new validator.
    @abc.abstractmethod
    def CreateValidator(self,
        request: global___MsgCreateValidator,
        context: grpc.ServicerContext,
    ) -> global___MsgCreateValidatorResponse: ...

    # EditValidator defines a method for editing an existing validator.
    @abc.abstractmethod
    def EditValidator(self,
        request: global___MsgEditValidator,
        context: grpc.ServicerContext,
    ) -> global___MsgEditValidatorResponse: ...

    # Delegate defines a method for performing a delegation of coins
    # from a delegator to a validator.
    @abc.abstractmethod
    def Delegate(self,
        request: global___MsgDelegate,
        context: grpc.ServicerContext,
    ) -> global___MsgDelegateResponse: ...

    # BeginRedelegate defines a method for performing a redelegation
    # of coins from a delegator and source validator to a destination validator.
    @abc.abstractmethod
    def BeginRedelegate(self,
        request: global___MsgBeginRedelegate,
        context: grpc.ServicerContext,
    ) -> global___MsgBeginRedelegateResponse: ...

    # Undelegate defines a method for performing an undelegation from a
    # delegate and a validator.
    @abc.abstractmethod
    def Undelegate(self,
        request: global___MsgUndelegate,
        context: grpc.ServicerContext,
    ) -> global___MsgUndelegateResponse: ...


def add_MsgServicer_to_server(servicer: MsgServicer, server: grpc.Server) -> None: ...
