"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc

from .query_pb2 import *
# Query provides defines the gRPC querier service
class QueryStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # Connection queries an IBC connection end.
    Connection:grpc.UnaryUnaryMultiCallable[
        global___QueryConnectionRequest,
        global___QueryConnectionResponse] = ...

    # Connections queries all the IBC connections of a chain.
    Connections:grpc.UnaryUnaryMultiCallable[
        global___QueryConnectionsRequest,
        global___QueryConnectionsResponse] = ...

    # ClientConnections queries the connection paths associated with a client
    # state.
    ClientConnections:grpc.UnaryUnaryMultiCallable[
        global___QueryClientConnectionsRequest,
        global___QueryClientConnectionsResponse] = ...

    # ConnectionClientState queries the client state associated with the
    # connection.
    ConnectionClientState:grpc.UnaryUnaryMultiCallable[
        global___QueryConnectionClientStateRequest,
        global___QueryConnectionClientStateResponse] = ...

    # ConnectionConsensusState queries the consensus state associated with the
    # connection.
    ConnectionConsensusState:grpc.UnaryUnaryMultiCallable[
        global___QueryConnectionConsensusStateRequest,
        global___QueryConnectionConsensusStateResponse] = ...


# Query provides defines the gRPC querier service
class QueryServicer(metaclass=abc.ABCMeta):
    # Connection queries an IBC connection end.
    @abc.abstractmethod
    def Connection(self,
        request: global___QueryConnectionRequest,
        context: grpc.ServicerContext,
    ) -> global___QueryConnectionResponse: ...

    # Connections queries all the IBC connections of a chain.
    @abc.abstractmethod
    def Connections(self,
        request: global___QueryConnectionsRequest,
        context: grpc.ServicerContext,
    ) -> global___QueryConnectionsResponse: ...

    # ClientConnections queries the connection paths associated with a client
    # state.
    @abc.abstractmethod
    def ClientConnections(self,
        request: global___QueryClientConnectionsRequest,
        context: grpc.ServicerContext,
    ) -> global___QueryClientConnectionsResponse: ...

    # ConnectionClientState queries the client state associated with the
    # connection.
    @abc.abstractmethod
    def ConnectionClientState(self,
        request: global___QueryConnectionClientStateRequest,
        context: grpc.ServicerContext,
    ) -> global___QueryConnectionClientStateResponse: ...

    # ConnectionConsensusState queries the consensus state associated with the
    # connection.
    @abc.abstractmethod
    def ConnectionConsensusState(self,
        request: global___QueryConnectionConsensusStateRequest,
        context: grpc.ServicerContext,
    ) -> global___QueryConnectionConsensusStateResponse: ...


def add_QueryServicer_to_server(servicer: QueryServicer, server: grpc.Server) -> None: ...
