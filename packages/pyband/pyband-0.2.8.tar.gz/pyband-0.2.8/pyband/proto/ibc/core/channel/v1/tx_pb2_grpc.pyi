"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import grpc

from .tx_pb2 import *
# Msg defines the ibc/channel Msg service.
class MsgStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
    ChannelOpenInit:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelOpenInit,
        global___MsgChannelOpenInitResponse] = ...

    # ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
    ChannelOpenTry:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelOpenTry,
        global___MsgChannelOpenTryResponse] = ...

    # ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
    ChannelOpenAck:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelOpenAck,
        global___MsgChannelOpenAckResponse] = ...

    # ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
    ChannelOpenConfirm:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelOpenConfirm,
        global___MsgChannelOpenConfirmResponse] = ...

    # ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
    ChannelCloseInit:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelCloseInit,
        global___MsgChannelCloseInitResponse] = ...

    # ChannelCloseConfirm defines a rpc handler method for
    # MsgChannelCloseConfirm.
    ChannelCloseConfirm:grpc.UnaryUnaryMultiCallable[
        global___MsgChannelCloseConfirm,
        global___MsgChannelCloseConfirmResponse] = ...

    # RecvPacket defines a rpc handler method for MsgRecvPacket.
    RecvPacket:grpc.UnaryUnaryMultiCallable[
        global___MsgRecvPacket,
        global___MsgRecvPacketResponse] = ...

    # Timeout defines a rpc handler method for MsgTimeout.
    Timeout:grpc.UnaryUnaryMultiCallable[
        global___MsgTimeout,
        global___MsgTimeoutResponse] = ...

    # TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
    TimeoutOnClose:grpc.UnaryUnaryMultiCallable[
        global___MsgTimeoutOnClose,
        global___MsgTimeoutOnCloseResponse] = ...

    # Acknowledgement defines a rpc handler method for MsgAcknowledgement.
    Acknowledgement:grpc.UnaryUnaryMultiCallable[
        global___MsgAcknowledgement,
        global___MsgAcknowledgementResponse] = ...


# Msg defines the ibc/channel Msg service.
class MsgServicer(metaclass=abc.ABCMeta):
    # ChannelOpenInit defines a rpc handler method for MsgChannelOpenInit.
    @abc.abstractmethod
    def ChannelOpenInit(self,
        request: global___MsgChannelOpenInit,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelOpenInitResponse: ...

    # ChannelOpenTry defines a rpc handler method for MsgChannelOpenTry.
    @abc.abstractmethod
    def ChannelOpenTry(self,
        request: global___MsgChannelOpenTry,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelOpenTryResponse: ...

    # ChannelOpenAck defines a rpc handler method for MsgChannelOpenAck.
    @abc.abstractmethod
    def ChannelOpenAck(self,
        request: global___MsgChannelOpenAck,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelOpenAckResponse: ...

    # ChannelOpenConfirm defines a rpc handler method for MsgChannelOpenConfirm.
    @abc.abstractmethod
    def ChannelOpenConfirm(self,
        request: global___MsgChannelOpenConfirm,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelOpenConfirmResponse: ...

    # ChannelCloseInit defines a rpc handler method for MsgChannelCloseInit.
    @abc.abstractmethod
    def ChannelCloseInit(self,
        request: global___MsgChannelCloseInit,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelCloseInitResponse: ...

    # ChannelCloseConfirm defines a rpc handler method for
    # MsgChannelCloseConfirm.
    @abc.abstractmethod
    def ChannelCloseConfirm(self,
        request: global___MsgChannelCloseConfirm,
        context: grpc.ServicerContext,
    ) -> global___MsgChannelCloseConfirmResponse: ...

    # RecvPacket defines a rpc handler method for MsgRecvPacket.
    @abc.abstractmethod
    def RecvPacket(self,
        request: global___MsgRecvPacket,
        context: grpc.ServicerContext,
    ) -> global___MsgRecvPacketResponse: ...

    # Timeout defines a rpc handler method for MsgTimeout.
    @abc.abstractmethod
    def Timeout(self,
        request: global___MsgTimeout,
        context: grpc.ServicerContext,
    ) -> global___MsgTimeoutResponse: ...

    # TimeoutOnClose defines a rpc handler method for MsgTimeoutOnClose.
    @abc.abstractmethod
    def TimeoutOnClose(self,
        request: global___MsgTimeoutOnClose,
        context: grpc.ServicerContext,
    ) -> global___MsgTimeoutOnCloseResponse: ...

    # Acknowledgement defines a rpc handler method for MsgAcknowledgement.
    @abc.abstractmethod
    def Acknowledgement(self,
        request: global___MsgAcknowledgement,
        context: grpc.ServicerContext,
    ) -> global___MsgAcknowledgementResponse: ...


def add_MsgServicer_to_server(servicer: MsgServicer, server: grpc.Server) -> None: ...
