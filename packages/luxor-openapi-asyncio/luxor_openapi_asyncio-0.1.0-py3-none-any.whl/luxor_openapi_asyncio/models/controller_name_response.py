# coding: utf-8

"""
    FXLuminaire Luxor

    API specification for FXLuminaire's Luxor lighting system.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from luxor_openapi_asyncio.configuration import Configuration


class ControllerNameResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'int',
        'controller': 'str',
        'conn_type': 'str',
        'rssi': 'int'
    }

    attribute_map = {
        'status': 'Status',
        'controller': 'Controller',
        'conn_type': 'ConnType',
        'rssi': 'RSSI'
    }

    def __init__(self, status=None, controller=None, conn_type=None, rssi=None, local_vars_configuration=None):  # noqa: E501
        """ControllerNameResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._controller = None
        self._conn_type = None
        self._rssi = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if controller is not None:
            self.controller = controller
        if conn_type is not None:
            self.conn_type = conn_type
        if rssi is not None:
            self.rssi = rssi

    @property
    def status(self):
        """Gets the status of this ControllerNameResponse.  # noqa: E501


        :return: The status of this ControllerNameResponse.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ControllerNameResponse.


        :param status: The status of this ControllerNameResponse.  # noqa: E501
        :type status: int
        """

        self._status = status

    @property
    def controller(self):
        """Gets the controller of this ControllerNameResponse.  # noqa: E501


        :return: The controller of this ControllerNameResponse.  # noqa: E501
        :rtype: str
        """
        return self._controller

    @controller.setter
    def controller(self, controller):
        """Sets the controller of this ControllerNameResponse.


        :param controller: The controller of this ControllerNameResponse.  # noqa: E501
        :type controller: str
        """

        self._controller = controller

    @property
    def conn_type(self):
        """Gets the conn_type of this ControllerNameResponse.  # noqa: E501


        :return: The conn_type of this ControllerNameResponse.  # noqa: E501
        :rtype: str
        """
        return self._conn_type

    @conn_type.setter
    def conn_type(self, conn_type):
        """Sets the conn_type of this ControllerNameResponse.


        :param conn_type: The conn_type of this ControllerNameResponse.  # noqa: E501
        :type conn_type: str
        """

        self._conn_type = conn_type

    @property
    def rssi(self):
        """Gets the rssi of this ControllerNameResponse.  # noqa: E501


        :return: The rssi of this ControllerNameResponse.  # noqa: E501
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this ControllerNameResponse.


        :param rssi: The rssi of this ControllerNameResponse.  # noqa: E501
        :type rssi: int
        """

        self._rssi = rssi

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ControllerNameResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ControllerNameResponse):
            return True

        return self.to_dict() != other.to_dict()
