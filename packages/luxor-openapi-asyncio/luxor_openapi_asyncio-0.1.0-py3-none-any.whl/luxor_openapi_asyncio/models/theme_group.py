# coding: utf-8

"""
    FXLuminaire Luxor

    API specification for FXLuminaire's Luxor lighting system.  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from luxor_openapi_asyncio.configuration import Configuration


class ThemeGroup(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'group_number': 'int',
        'intensity': 'int',
        'color': 'int'
    }

    attribute_map = {
        'group_number': 'GroupNumber',
        'intensity': 'Intensity',
        'color': 'Color'
    }

    def __init__(self, group_number=None, intensity=None, color=None, local_vars_configuration=None):  # noqa: E501
        """ThemeGroup - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._group_number = None
        self._intensity = None
        self._color = None
        self.discriminator = None

        if group_number is not None:
            self.group_number = group_number
        if intensity is not None:
            self.intensity = intensity
        if color is not None:
            self.color = color

    @property
    def group_number(self):
        """Gets the group_number of this ThemeGroup.  # noqa: E501

        Group number  # noqa: E501

        :return: The group_number of this ThemeGroup.  # noqa: E501
        :rtype: int
        """
        return self._group_number

    @group_number.setter
    def group_number(self, group_number):
        """Sets the group_number of this ThemeGroup.

        Group number  # noqa: E501

        :param group_number: The group_number of this ThemeGroup.  # noqa: E501
        :type group_number: int
        """

        self._group_number = group_number

    @property
    def intensity(self):
        """Gets the intensity of this ThemeGroup.  # noqa: E501

        Intensity  # noqa: E501

        :return: The intensity of this ThemeGroup.  # noqa: E501
        :rtype: int
        """
        return self._intensity

    @intensity.setter
    def intensity(self, intensity):
        """Sets the intensity of this ThemeGroup.

        Intensity  # noqa: E501

        :param intensity: The intensity of this ThemeGroup.  # noqa: E501
        :type intensity: int
        """

        self._intensity = intensity

    @property
    def color(self):
        """Gets the color of this ThemeGroup.  # noqa: E501

        Color  # noqa: E501

        :return: The color of this ThemeGroup.  # noqa: E501
        :rtype: int
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this ThemeGroup.

        Color  # noqa: E501

        :param color: The color of this ThemeGroup.  # noqa: E501
        :type color: int
        """

        self._color = color

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ThemeGroup):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ThemeGroup):
            return True

        return self.to_dict() != other.to_dict()
