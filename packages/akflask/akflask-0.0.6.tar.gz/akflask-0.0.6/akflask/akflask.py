# coding=utf-8

"""
    @header create_flask.py
    @abstract   
    
    @MyBlog: http://www.kuture.com.cn
    @author  Created by Kuture on 2021/8/10
    @version 1.0.0 2021/8/10 Creation()
    
    @Copyright © 2021年 Mr.Li All rights reserved
"""
import os
import sys
import shutil
import base64
import argparse
from datetime import datetime


pars = argparse.ArgumentParser(description='Create Flask Project')
pars.add_argument('--proj_name', type=str, default='MyProject', help='Project Name, Default Is MyProject!')
pars.add_argument('--proj_dir', default=None, help='Project Dir Path, Default Is None')
args = pars.parse_args()


class AKFlask(object):

    def __init__(self, project_name, project_dir=None):

        dir_name, file = os.path.split(os.path.abspath(sys.argv[0]))
        if (project_dir is None) or (not os.path.exists(project_dir)):self._project_name = os.path.join(dir_name, project_name)
        else:self._project_name = os.path.join(project_dir, project_name)

        self._server_log_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciBTZXJ2ZXJfbG9nLnB5CiAgICBAYWJzdHJhY3QgICAKICAgIAogICAgQE15QmxvZzogaHR0cDovL3d3dy5rdXR1cmUuY29tLmNuCiAgICBAYXV0aG9yICBDcmVhdGVkIGJ5IEt1dHVyZSBvbiAyMDIxLzgvOQogICAgQHZlcnNpb24gMS4wLjAgMjAyMS84LzkgQ3JlYXRpb24oKQogICAgCiAgICBAQ29weXJpZ2h0IMKpIDIwMjHlubQgTXIuTGkgQWxsIHJpZ2h0cyByZXNlcnZlZAoiIiIKaW1wb3J0IGxvZ2dpbmcKZnJvbSBsb2dnaW5nIGltcG9ydCBoYW5kbGVycwoKbGV2ZWxfcmVsYXRpb25zID0gewogICAgJ2RlYnVnJzogbG9nZ2luZy5ERUJVRywKICAgICdpbmZvJzogbG9nZ2luZy5JTkZPLAogICAgJ3dhcm5pbmcnOiBsb2dnaW5nLldBUk5JTkcsCiAgICAnZXJyb3InOiBsb2dnaW5nLkVSUk9SLAogICAgJ2NyaXQnOiBsb2dnaW5nLkNSSVRJQ0FMCn0gICMgbG9nIGxldmVsIGRpY3QKCnByb2plY3RfbmFtZSA9ICdhaXNlcnZlcmZsYXNrJyAgIyBwcm9qZWN0IG5hbWUgZm9yIHJlY29nbml0aW9uIGxvZ28KCgpjbGFzcyBMb2dnZXIob2JqZWN0KToKCiAgICBkZWYgX19pbml0X18oc2VsZiwgbGV2ZWw9J2RlYnVnJywgZmlsZW5hbWU9Tm9uZSwgd2hlbj0nVycsIGJhY2tDb3VudD0yMCk6CgogICAgICAgIGlmIGZpbGVuYW1lIGlzIE5vbmU6CiAgICAgICAgICAgIHJldHVybgoKICAgICAgICAjICBsb2cgZm9ybWF0CiAgICAgICAgIyBmbXQgPSAnJShhc2N0aW1lKXMgLSAlKGZpbGVuYW1lKXNbbGluZTolKGxpbmVubylkXSAtICUobGV2ZWxuYW1lKXM6ICUobWVzc2FnZSlzJwogICAgICAgIGZtdCA9ICclKGFzY3RpbWUpcyAtIFtsaW5lOiUobGluZW5vKWRdIC0gJShsZXZlbG5hbWUpczogJShtZXNzYWdlKXMnCiAgICAgICAgIyBsb2cgYWJzb2x1dGUgcGF0aAoKICAgICAgICBzZWxmLmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKGZpbGVuYW1lKQoKICAgICAgICBmb3JtYXRfc3RyID0gbG9nZ2luZy5Gb3JtYXR0ZXIoZm10KSAgIyBzZXR0aW5nIGxvZyBmb3JtYXQKICAgICAgICBzZWxmLmxvZ2dlci5zZXRMZXZlbChsZXZlbF9yZWxhdGlvbnMuZ2V0KGxldmVsKSkgICMgc2V0dGluZyBsb2cgbGV2ZWwKICAgICAgICBzaCA9IGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpICAjIGRpc3BsYXkgaW4gdGVybWluYWwKICAgICAgICBzaC5zZXRGb3JtYXR0ZXIoZm9ybWF0X3N0cikgICMgc2V0dGluZyBkaXNwbGF5IGZvcm1hdAoKICAgICAgICAjIHdyaXRlIGxvZyBpbiBmaWxlLCBzZXR0aW5nIHRpbWUgaW50ZXJ2YWwgZm9yIGF1dG8gZ2VuZXJhdGUgZmlsZQogICAgICAgICMgdGggPSBoYW5kbGVycy5UaW1lZFJvdGF0aW5nRmlsZUhhbmRsZXIoZmlsZW5hbWU9ZmlsZW5hbWUsIHdoZW49d2hlbiwgYmFja3VwQ291bnQ9YmFja0NvdW50LAogICAgICAgICMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5jb2Rpbmc9J3V0Zi04JykKICAgICAgICAjIHRoLnNldEZvcm1hdHRlcihmb3JtYXRfc3RyKSAgIyBzZXR0aW5nIHdyaXRpbmcgZm9tYXRlCgogICAgICAgICMgYXV0byBnZW5lcmF0ZSBmaWxlIGZvciBjb250cm9sIGZpbGUgc2l6ZSBhbmQgY291bnQKICAgICAgICBzaXplX3RoID0gaGFuZGxlcnMuUm90YXRpbmdGaWxlSGFuZGxlcihmaWxlbmFtZSwgbWF4Qnl0ZXM9NSoxMDI0KjEwMjQsIGJhY2t1cENvdW50PWJhY2tDb3VudCkKICAgICAgICBzaXplX3RoLnNldEZvcm1hdHRlcihmb3JtYXRfc3RyKQoKICAgICAgICAjIGFkZCBvYmplY3QgdG8gbG9nZ2VyCiAgICAgICAgc2VsZi5sb2dnZXIuYWRkSGFuZGxlcihzaXplX3RoICkgICMgc2l6ZSBmb3JtYXQKICAgICAgICAjIHNlbGYubG9nZ2VyLmFkZEhhbmRsZXIodGgpICAjIHRpbWUgZm9ybWF0CiAgICAgICAgc2VsZi5sb2dnZXIuYWRkSGFuZGxlcihzaCk='
        self._server_conf_base_str = 'IyBjb2Rpbmc9dXRmLTgKIiIiCiAgICBAaGVhZGVyIGNvbmZpZy5weQogICAgQGFic3RyYWN0ICAgCiAgICAKICAgIEBNeUJsb2c6IGh0dHA6Ly93d3cua3V0dXJlLmNvbS5jbgogICAgQGF1dGhvciAgQ3JlYXRlZCBieSBLdXR1cmUgb24gMjAyMS84LzkKICAgIEB2ZXJzaW9uIDEuMC4wIDIwMjEvOC85IENyZWF0aW9uKCkKICAgIAogICAgQENvcHlyaWdodCDCqSAyMDIx5bm0IE1yLkxpIEFsbCByaWdodHMgcmVzZXJ2ZWQKIiIiCmltcG9ydCBvcwppbXBvcnQgY3YyCmltcG9ydCBzeXMKaW1wb3J0IGJhc2U2NAppbXBvcnQgbnVtcHkgYXMgbnAKZnJvbSBNb2R1bGVzLlNlcnZlcl9sb2cgaW1wb3J0IExvZ2dlcgpmcm9tIGZsYXNrIGltcG9ydCBtYWtlX3Jlc3BvbnNlLCBqc29uaWZ5CgoKdHJ5OgogICAgZGlybmFtZSwgZmlsZSA9IG9zLnBhdGguc3BsaXQob3MucGF0aC5hYnNwYXRoKHN5cy5hcmd2WzBdKSkKICAgIGxvZ19kaXIgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgJ0xvZycpCiAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMobG9nX2Rpcik6CiAgICAgICAgb3MubWtkaXIobG9nX2RpcikKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgIGxvZ19kaXIgPSBvcy5wYXRoLmV4cGFuZHVzZXIoJ34nKQogICAgbG9nID0gTG9nZ2VyKCdpbmZvJywgb3MucGF0aC5qb2luKGxvZ19kaXIsICdTZXJ2ZXIubG9nJykpICAjIGxvZyBpbnN0YW50aWF0aW9uCiAgICBsb2cubG9nZ2VyLmVycm9yKCdDcmVhdGUgTG9nIERpciBFcnJvciwgTmV3IExvZyBQYXRoOnt9Jy5mb3JtYXQob3MucGF0aC5qb2luKGxvZ19kaXIsICdTZXJ2ZXIubG9nJykpKQoKbG9nID0gTG9nZ2VyKCdpbmZvJywgb3MucGF0aC5qb2luKGxvZ19kaXIsICdTZXJ2ZXIubG9nJykpICAjIGxvZyBpbnN0YW50aWF0aW9uCgonJyctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBTZXJ2ZXIgSVAsIFBvcnQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nJycKREVGQVVMVF9JUCA9ICcxMjcuMC4wLjEnCkRFRkFVTFRfUE9SVCA9IDg4NjYKCicnJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOWTjeW6lOeKtuaAgeeggSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScnJwpPSyA9IDIwMApFUlJPUiA9IDQwMDAKCicnJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIOWfuuehgOiuvue9ruWPguaVsCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScnJwpJTUFHRV9SRVNJWkUgPSA1MDAgICAjIOWbvuWDj+etieavlOe8qeaUvuavlOS+iwoKJycnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSDlkITlip/og73mqKHlnovml6Xlv5fnvJbnoIEgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScnJwonJycKICAgIFNlcnZlciAgICAgMDAwMDAKICAgIE1haW4gICAgICAgMTAwMDAKJycnCgoKY2xhc3MgQWJzb2x1dGVQYXRoKG9iamVjdCk6CgogICAgIyBwcm9jZXNzb3IgZmlsZSBhYnNvbHV0ZSBwYXRoCiAgICBkZWYgcHJvY2Vzc29yRmlsZUFic29sdXRlUGF0aChzZWxmLCBmaWxlbmFtZSk6CiAgICAgICAgZGlybmFtZSwgZmlsZSA9IG9zLnBhdGguc3BsaXQob3MucGF0aC5hYnNwYXRoKHN5cy5hcmd2WzBdKSkKICAgICAgICBwcm9jZXNzb3JfZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKGRpcm5hbWUsIGZpbGVuYW1lKQogICAgICAgIHJldHVybiBwcm9jZXNzb3JfZmlsZV9wYXRoCgogICAgIyBzdGF0aWMgcmVzb3VyY2UgYWJzb2x1dGUgcGF0aAogICAgZGVmIHN0YXRpY1Jlc291cmNlQWJzb2x1dGVQYXRoKHNlbGYsIGZpbGVuYW1lKToKICAgICAgICBkaXJuYW1lLCBmaWxlID0gb3MucGF0aC5zcGxpdChvcy5wYXRoLmFic3BhdGgoc3lzLmFyZ3ZbMF0pKQogICAgICAgIHN0YXRpY19maWxlX3BhdGggPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgJ1Jlc291cmNlJykKICAgICAgICBzdGF0aWNfZmlsZV9wYXRoID0gb3MucGF0aC5qb2luKHN0YXRpY19maWxlX3BhdGgsIGZpbGVuYW1lKQogICAgICAgIHJldHVybiBzdGF0aWNfZmlsZV9wYXRoCgogICAgIyByb290IGFic29sdXRlIGRpciBwYXRoCiAgICBkZWYgcm9vdEFic29sdXRlUGF0aChzZWxmLCBkaXJzKToKICAgICAgICBkaXJuYW1lLCBmaWxlID0gb3MucGF0aC5zcGxpdChvcy5wYXRoLmFic3BhdGgoc3lzLmFyZ3ZbMF0pKQogICAgICAgIGRpcm5hbWUgPSBvcy5wYXRoLmpvaW4oZGlybmFtZSwgZGlycykKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoZGlybmFtZSk6CiAgICAgICAgICAgIG9zLm1rZGlyKGRpcm5hbWUpCiAgICAgICAgcmV0dXJuIGRpcm5hbWUKCgpjbGFzcyBTZXJ2ZXJUb29scyhvYmplY3QpOgoKICAgICMg6Leo5Z+fCiAgICBkZWYgY3Jvc3NfZG9tYWluKHNlbGYsIHJlc3BvbnNlKToKCiAgICAgICAgIyDliqDlhaXkvJjljJblj4LmlbAKICAgICAgICAjIHJlc3BvbnNlWydyZXN1bHQnXVsnc3BlbmRfdGltZSddICs9IE9QVElNX1BBUkFNRQogICAgICAgICMgdGltZS5zbGVlcChPUFRJTV9QQVJBTUUpCgogICAgICAgIHJlc3BvbnNlID0gbWFrZV9yZXNwb25zZShqc29uaWZ5KHJlc3BvbnNlKSkKICAgICAgICByZXNwb25zZS5oZWFkZXJzWydBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW4nXSA9ICcqJwogICAgICAgIHJlc3BvbnNlLmhlYWRlcnNbJ0FjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZCddID0gJyonCiAgICAgICAgcmVzcG9uc2UuaGVhZGVyc1snQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVycyddID0gJyonCiAgICAgICAgcmV0dXJuIHJlc3BvbnNlCgogICAgIyBhcnJheSB0cmFuc2Zvcm0gdG8gYmFzZTY0IHN0cmluZwogICAgZGVmIGFycmF5X3RvX2Jhc2U2NChzZWxmLCBhcnJheV9kYXRhOiBucC5hcnJheSk6CiAgICAgICAgYXJyX2Jhc2Vfc3RyID0gY3YyLmltZW5jb2RlKCIuanBnIiwgYXJyYXlfZGF0YSlbMV0udG9zdHJpbmcoKQogICAgICAgIHJldHVybiBiYXNlNjQuYjY0ZW5jb2RlKGFycl9iYXNlX3N0cikuZGVjb2RlKCkKCiAgICAjIGJhc2U2NCBzdHJpbmcgdHJhbnNmb3JtIHRvIGFycmF5CiAgICBkZWYgYmFzZTY0X3RvX2FycmF5KHNlbGYsIGJhc2U2NF9kYXRhKToKCiAgICAgICAgaWYgYmFzZTY0X2RhdGEuc3RhcnRzd2l0aCgnZGF0YTppbWFnZS8nKToKICAgICAgICAgICAgYmFzZTY0X2RhdGEgPSBiYXNlNjRfZGF0YS5zcGxpdCgnYmFzZTY0LCcpWzFdCgogICAgICAgIGltZ0RhdGEgPSBiYXNlNjQuYjY0ZGVjb2RlKGJhc2U2NF9kYXRhKQogICAgICAgIGltZ19ucCA9IG5wLmZyb21idWZmZXIoaW1nRGF0YSwgZHR5cGU9bnAudWludDgpCiAgICAgICAgcmV0dXJuIGN2Mi5pbWRlY29kZShpbWdfbnAsIGN2Mi5DT0xPUl9SR0IyQkdSKQoKICAgICMg5Zu+5YOP562J5q+U57yp5pS+CiAgICBkZWYgZXF1YWxfcmF0aW9fcmVzaXplKHNlbGYsIGltYWdlLCByYXRpb193PUlNQUdFX1JFU0laRSk6CgogICAgICAgIGhlaWdodCwgd2lkdGggPSBpbWFnZS5zaGFwZVs6Ml0KICAgICAgICBpbWdfcmF0aW8gPSByYXRpb193IC8gd2lkdGgKICAgICAgICByYXRpb19oID0gaW50KGhlaWdodCAqIGltZ19yYXRpbykKICAgICAgICByYXRpb19pbWFnZSA9IGN2Mi5yZXNpemUoaW1hZ2UsIChpbnQocmF0aW9fdyksIHJhdGlvX2gpKQoKICAgICAgICByZXR1cm4gcmF0aW9faW1hZ2UsIGltZ19yYXRpbwoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgo='
        self._server_views_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciB2aWV3cy5weQogICAgQGFic3RyYWN0ICAgCiAgICAKICAgIEBNeUJsb2c6IGh0dHA6Ly93d3cua3V0dXJlLmNvbS5jbgogICAgQGF1dGhvciAgQ3JlYXRlZCBieSBLdXR1cmUgb24gMjAyMS84LzkKICAgIEB2ZXJzaW9uIDEuMC4wIDIwMjEvOC85IENyZWF0aW9uKCkKICAgIAogICAgQENvcHlyaWdodCDCqSAyMDIx5bm0IE1yLkxpIEFsbCByaWdodHMgcmVzZXJ2ZWQKIiIiCmltcG9ydCBqc29uCmZyb20gZmxhc2sgaW1wb3J0IEJsdWVwcmludCwgcmVxdWVzdApmcm9tIGNvbmZpZyBpbXBvcnQgU2VydmVyVG9vbHMsIGxvZwoKCm1haW5fYXBwID0gQmx1ZXByaW50KCdtYWluX2FwcCcsIF9fbmFtZV9fKQp0b29scyA9IFNlcnZlclRvb2xzKCkKCgojIGNhbGxiYWNrIGZ1bmN0aW9uLCBvYnRhaW4gcmVnaXN0ZXIgYmx1ZXByaW50IGlucHV0IHBhcmFtZXRlcgpkZWYgY2FsbGJhY2tfcGFyYW1ldGVycyhwYXJhbWV0ZXIpOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDEwMDAwIF0gLSBNYWluIEFQUCBDYWxsYmFjayBGdW5jdGlvbi4uLicpCiAgICBwYXJhX2RpY3QgPSBwYXJhbWV0ZXIub3B0aW9ucwoKCiMg6LCD55So5Zue6LCD5pa55rOVCm1haW5fYXBwLnJlY29yZChjYWxsYmFja19wYXJhbWV0ZXJzKQoKCkBtYWluX2FwcC5yb3V0ZSgnLycsIG1ldGhvZHM9WydQT1NUJ10pCmRlZiBpbmRleCgpOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDIwMDAxIF0gLSBNYWluIEFwcCBJbmRleCBVcmwgUE9TVCBSZXF1ZXN0Li4uJykKICAgIHRyeToKICAgICAgICBwb3N0X3BhcmFtZXRlciA9IGpzb24ubG9hZHMocmVxdWVzdC5nZXRfZGF0YSgpKQogICAgICAgIGxvZy5sb2dnZXIuaW5mbygnWyAyMDAwMiBdIC0gTWFpbiBBcHAgSW5kZXggUE9TVCBQYXJhbWV0ZXI6e30nLmZvcm1hdChzdHIocG9zdF9wYXJhbWV0ZXIpWzo2OF0pKQoKICAgICAgICByZXNwb25zZV9yZXMgPSAnJwogICAgICAgIGxvZy5sb2dnZXIuaW5mbygnWyAyMDAwNSBdIC0gTWFpbiBBcHAgSW5kZXggUmVzcG9uc2UuLi4nKQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgICAgICBlcnJvcl9tc2cgPSAnWyAyMDAwMyBdIC0gTWFpbiBBcHAgSW5kZXggVXJsIFBPU1QgUmVxdWVzdCBFcnJvcjp7fScuZm9ybWF0KGVycm9yKQogICAgICAgIHJldHVybiB0b29scy5jcm9zc19kb21haW4oeyJjb2RlIjogY29uZmlnLkVSUk9SLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICJtZXNzYWdlIjogZXJyb3JfbXNnfSkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHRvb2xzLmNyb3NzX2RvbWFpbihyZXNwb25zZV9yZXMpCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoK'
        self._server_manager_base_str = 'IyBjb2Rpbmc9dXRmLTgKCiIiIgogICAgQGhlYWRlciBtYW5hZ2VyLnB5CiAgICBAYWJzdHJhY3QKCiAgICBATXlCbG9nOiBodHRwOi8vd3d3Lmt1dHVyZS5jb20uY24KICAgIEBhdXRob3IgIENyZWF0ZWQgYnkgS3V0dXJlIG9uIDIwMjEvOC85CiAgICBAdmVyc2lvbiAxLjAuMCAyMDIxLzgvOSBDcmVhdGlvbigpKCkKCiAgICBAQ29weXJpZ2h0IMKpIDIwMjHlubQgTXIuTGkgQWxsIHJpZ2h0cyByZXNlcnZlZAoiIiIKaW1wb3J0IGNvbmZpZwppbXBvcnQgYXJncGFyc2UKCmxvZyA9IGNvbmZpZy5sb2cKbG9nLmxvZ2dlci5pbmZvKCcnKQpsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMDAgXSAtIHt9U3RhcnQgTWFuYWdlciBTZXJ2aWNle30nLmZvcm1hdCgnLScgKiAyMCwgJy0nICogMjApKQoKJycnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSBJbml0IFNlcnZlciBBbmQgQmx1ZXByaW50IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nJycKdHJ5OgogICAgaW1wb3J0IGpzb24KICAgIGltcG9ydCB0aW1lCiAgICBmcm9tIGNvbmZpZyBpbXBvcnQgQWJzb2x1dGVQYXRoLCBTZXJ2ZXJUb29scwogICAgZnJvbSBBUFAuTWFpbiBpbXBvcnQgdmlld3MgYXMgbWFpbl92aWV3CiAgICBmcm9tIGZsYXNrIGltcG9ydCBGbGFzaywgcmVxdWVzdCwganNvbmlmeSwgc2VuZF9mcm9tX2RpcmVjdG9yeSwgc2Vzc2lvbiwgbWFrZV9yZXNwb25zZQoKICAgIGFwcCA9IEZsYXNrKF9fbmFtZV9fKQogICAgYXBwLmRlYnVnID0gRmFsc2UKICAgIGFwcC5zZWNyZXRfa2V5ID0gJ0t1dHVyZScKCiAgICAjIEluaXQgU2VydmVyIHRvb2xzCiAgICBhYnNvbHV0ZV9jb25maWcgPSBBYnNvbHV0ZVBhdGgoKQoKICAgICMgSW5pdCBibHVlcHJpbnQKICAgIGNhbGxfYmFja19kaWN0ID0geyJrZXkiOiAicGFyYW1ldGVyIn0KICAgIGFwcC5yZWdpc3Rlcl9ibHVlcHJpbnQobWFpbl92aWV3Lm1haW5fYXBwLCB1cmxfcHJlZml4PScvJywgKipjYWxsX2JhY2tfZGljdCkgICMgY2FsbF9iYWNrX2RpY3TkuLrkvKDpgJLnmoTlj4LmlbAKCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6CiAgICBlcnJvcl9tc2cgPSAnWyAwMDAwMSBdIC0gTG9hZCBGbGFzayBBbmQgQ29uZmlnIEVycm9yOnt9Jy5mb3JtYXQoZXJyb3IpCiAgICBsb2cubG9nZ2VyLmVycm9yKGVycm9yX21zZykKICAgIHJhaXNlIEV4Y2VwdGlvbihlcnJvcl9tc2cpCmVsc2U6CiAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMDIgXSAtIExvYWRlZCBGbGFzayBBbmQgQ29uZmlnIC4uLicpCgonJyctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIExvYWQgTWFpbiBGdW5jdGlvbiBDbGFzcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScnJwp0cnk6CiAgICBwYXNzCmV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6CiAgICBlcnJvcl9tc2cgPSAnWyAwMDAwMyBdIC0gTG9hZGVkIHh4eCBGdW5jdGlvbiBFcnJvcjp7fScuZm9ybWF0KGVycm9yKQogICAgbG9nLmxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICByYWlzZSBFeGNlcHRpb24oZXJyb3JfbXNnKQplbHNlOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDA0IF0gLSBMb2FkZWQgeHh4IC4uLicpCgonJyctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIGluaXQgZ2xvYmFsIHZhcmlhYmxl77yMIGNyZWF0ZSBmb2xkZXIsIHN0YXRpYyByZXNvdXJjZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJycnCnRyeToKICAgICMgQ2hlY2sgUmVzb3VyY2UgRm9sZGVyLElmIEl0IERvZXMgTm90IEV4aXN0LCBDcmVhdGUKICAgIHJlc291cmNlX2ZvbGRlcl9wYXRoID0gYWJzb2x1dGVfY29uZmlnLnJvb3RBYnNvbHV0ZVBhdGgoJ1Jlc291cmNlJykKICAgIHRlbXBvcmFyeV9mb2xkZXJfcGF0aCA9IGFic29sdXRlX2NvbmZpZy5yb290QWJzb2x1dGVQYXRoKCdUZW1wb3JhcnknKSAgIyBDcmVhdGUgVGVtcG9yYXJ5IEZvbGRlcgoKZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgIGVycm9yX21zZyA9ICdbIDAwMDA1IF0gLSBJbml0IEdsb2JhbCBFcnJvcjp7fScuZm9ybWF0KGVycm9yKQogICAgbG9nLmxvZ2dlci5lcnJvcihlcnJvcl9tc2cpCiAgICByYWlzZSBFeGNlcHRpb24oZXJyb3JfbXNnKQplbHNlOgogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDA2IF0gLSBJbml0IEdsb2JhbCAuLi4nKQogICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDA3IF0gLSBSZXNvdXJjZSBEaXIgUGF0aDp7fScuZm9ybWF0KHJlc291cmNlX2ZvbGRlcl9wYXRoKSkKICAgIGxvZy5sb2dnZXIuaW5mbygnWyAwMDAwOCBdIC0gVGVtcG9yYXJ5IERpciBQYXRoOnt9Jy5mb3JtYXQodGVtcG9yYXJ5X2ZvbGRlcl9wYXRoKSkKCgpkZWYgbWFpbihzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0KToKICAgIHRyeToKICAgICAgICBhcHAucnVuKGhvc3Q9c2VydmVyX2lwLCBwb3J0PXNlcnZlcl9wb3J0KQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlcnJvcjoKICAgICAgICBsb2cubG9nZ2VyLmVycm9yKCdbIDAwMDIyIF0gLSBBSSBTZXJ2ZXIgQ2FuIE5vdCBMYXVuY2g6IHt9Jy5mb3JtYXQoZXJyb3IpKQogICAgICAgIGRlZmF1bHRfcG9ydCA9IHNlcnZlcl9wb3J0ICsgMgogICAgICAgIHRyeToKICAgICAgICAgICAgbG9nLmxvZ2dlci5pbmZvKCdbIDAwMDIzIF0gLSBUcnkgTGF1bmNoIFNlcnZlciBXaXRoIE5ldyBQb3J0OiB7fScuZm9ybWF0KGRlZmF1bHRfcG9ydCkpCiAgICAgICAgICAgIGFwcC5ydW4oaG9zdD1zZXJ2ZXJfaXAsIHBvcnQ9ZGVmYXVsdF9wb3J0KQogICAgICAgICAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMjUgXSAtIE5ldyBQb3J0OiB7fSBMYXVuY2ggU3VjY2Vzc2Z1bCEnLmZvcm1hdChkZWZhdWx0X3BvcnQpKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZXJyb3I6CiAgICAgICAgICAgIGxvZy5sb2dnZXIuZXJyb3IoJ1sgMDAwMjYgXSAtIFRlbXBvcmFyeSBJUCBFcnJvcjp7fScuZm9ybWF0KGVycm9yKSkKCiAgICAgICAgbG9nLmxvZ2dlci5lcnJvcignWyAwMDAyNyBdIC0gVHJ5IExhdW5jaCBTZXJ2ZXIgRXJyb3IsICcKICAgICAgICAgICAgICAgICAgICAgICAgICdQbGVhc2UgQ2hlY2sgUG9ydCB7fSBhbmQgUmVzdGFydCBUaGUgU2VydmVyJy5mb3JtYXQoc2VydmVyX3BvcnQpKQoKCmlmIF9fbmFtZV9fID09ICdfX21haW5fXyc6CgogICAgcGFyYXNlciA9IGFyZ3BhcnNlLkFyZ3VtZW50UGFyc2VyKGRlc2NyaXB0aW9uPSdTY3JhdGNoIEFJIFNlcnZlcicpCiAgICBwYXJhc2VyLmFkZF9hcmd1bWVudCgnLS1pcCcsIHR5cGU9c3RyLCBkZWZhdWx0PWNvbmZpZy5ERUZBVUxUX0lQLCBoZWxwPSdTZXJ2ZXIgSVAsIERlZmF1bHQgaXMgMTI3LjAuMC4xJykKICAgIHBhcmFzZXIuYWRkX2FyZ3VtZW50KCctLXBvcnQnLCB0eXBlPWludCwgZGVmYXVsdD1jb25maWcuREVGQVVMVF9QT1JULCBoZWxwPSdTZXJ2ZXIgUG9ydCwgRGVmYXVsdCBpcyA4ODY2JykKCiAgICBhcmdzID0gcGFyYXNlci5wYXJzZV9hcmdzKCkKICAgIHNlcnZlcl9pcCA9IGFyZ3MuaXAKICAgIHNlcnZlcl9wb3J0ID0gYXJncy5wb3J0CiAgICBsb2cubG9nZ2VyLmluZm8oJ1sgMDAwMjEgXSAtIFNjcmF0Y2ggU2VydmVyIElQOnt9IFBvcnQ6e30nLmZvcm1hdChzZXJ2ZXJfaXAsIHNlcnZlcl9wb3J0KSkKCiAgICBtYWluKHNlcnZlcl9pcCwgc2VydmVyX3BvcnQpCgoKCgoKCgoKCgo='

        print(self._generate_print_str('创建工程 {}'.format(self._project_name)))
        if os.path.exists(self._project_name):
            input_str = input('{} is exist, recover or not(y/n)'.format(self._project_name))
            if input_str.lower() == 'y':
                shutil.rmtree(self._project_name)
        os.mkdir(self._project_name)

    # generate print str
    def _generate_print_str(self, label_str):
        new_label = '{}{}'.format('-' * (50 - len(label_str)), label_str)
        return new_label

    # generate python file
    def _generate_file(self, file_path, file_content):

        if isinstance(file_content, bytes):file_content = file_content.decode()
        file_content = file_content.replace('2021/8/9', '{}'.format(str(datetime.now()).split()[0]))
        with open(file_path, 'w') as sf:
            sf.write(file_content)

    # create Modules
    def _create_modules(self):
        print(self._generate_print_str('创建模块 Modules'))
        modules_path = os.path.join(self._project_name, 'Modules')
        modules_init_path = os.path.join(modules_path, '__init__.py')
        modules_log_path = os.path.join(modules_path, 'Server_log.py')

        os.mkdir(modules_path)
        self._generate_file(modules_init_path, '')
        self._generate_file(modules_log_path, base64.b64decode(self._server_log_base_str))

    # create Package
    def _create_package(self):
        print(self._generate_print_str('创建模块 Package'))
        package_path = os.path.join(self._project_name, 'Package')
        package_init_path = os.path.join(package_path, '__init__.py')

        os.mkdir(package_path)
        self._generate_file(package_init_path, '')

    # create app
    def _create_app(self):

        print(self._generate_print_str('创建模块 APP'))
        app_path = os.path.join(self._project_name, 'APP')
        app_main_dir_path = os.path.join(app_path, 'Main')
        app_main_init_path = os.path.join(app_main_dir_path, '__init__.py')
        app_main_views_path = os.path.join(app_main_dir_path, 'views.py')

        os.mkdir(app_path)
        os.mkdir(app_main_dir_path)
        self._generate_file(app_main_init_path, '')
        self._generate_file(app_main_views_path, base64.b64decode(self._server_views_base_str))

    # create config file
    def _create_config(self):

        print(self._generate_print_str('创建文件 config'))
        config_path = os.path.join(self._project_name, 'config.py')
        self._generate_file(config_path, base64.b64decode(self._server_conf_base_str))

    # create manager file
    def _create_manager(self):

        print(self._generate_print_str('创建文件 manager'))
        manager_path = os.path.join(self._project_name, 'manager.py')
        self._generate_file(manager_path, base64.b64decode(self._server_manager_base_str))

    # create all
    def main_create(self):
        self._create_modules()
        self._create_package()
        self._create_app()
        self._create_config()
        self._create_manager()


if __name__ == '__main__':

    create_obj = AKFlask(args.proj_name, args.proj_dir)
    create_obj.main_create()

















