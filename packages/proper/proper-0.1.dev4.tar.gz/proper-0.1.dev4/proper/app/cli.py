import properconf
import pyceo

from proper import generators, static
from .cli_run import run_server


ENCRIPTED_HEADER = """# -------------------------------------------------------------
# -- DO NOT EDIT THIS FILE --
# Use `bin/manage secrets %s`
# -------------------------------------------------------------
#
"""


def get_app_cli(app):
    attrs = {
        "__doc__": """
        Application-specific commands.

        You don't need a special console to interact with the app,
        just run `ipython` or the regular python interpreter and import
        the application, like a regular python package.
        """,
        "run": run_server,
        "routes": get_routes_cmd(app),
        "secrets": get_secrets_cmd(app),
        "g": get_generators_cli(app),
        "static": get_static_cli(app),
    }

    return type("AppCli", (pyceo.Cli,), attrs)


def get_routes_cmd(app):
    def routes(self):
        """Show all registered routes.
        """
        print(
            "\nRoutes match in priority from top to bottom.\n"
            "The rules that doesn't have a `to` property are"
            " build-only and never match.\n"
        )

        routes = []
        for route in app.routes:
            method = route.method if route.method else "—"
            path = route.path
            if route.redirect:
                to = f"↪ {route.redirect}"
            elif route.to:
                to = route.to.__qualname__
            else:
                to = "-"
            name = route.name or "-"
            defaults = route.defaults or "-"
            routes.append([method, path, to, name, defaults])

        PADDING = 1
        HEADERS = ["", "PATH", "TO", "NAME", "DEFAULTS"]

        lengths = [len(header) for header in HEADERS]
        for route in routes:
            lengths = [max(ll, len(text)) for ll, text in zip(lengths, route)]
        lengths = [ll + PADDING for ll in lengths]

        print(*[header.ljust(ll, " ") for (header, ll) in zip(HEADERS, lengths)])
        print(*["-" * ll for ll in lengths])
        for route in routes:
            print(*[text.ljust(ll, " ") for (text, ll) in zip(route, lengths)])
        print()
    return routes


def get_secrets_cmd(app):
    def secrets(self, env):
        """Edit your encrypted secrets.

        Arguments:

        - env:
            Name of the environment (e.g.: "development", "production", etc.)
            It will be used for finding the encrypted file (e.g.: "development.enc.toml")
            and the key (e.g.: "development.key").

        """
        path = app.root_path / "config"
        header = ENCRIPTED_HEADER % (env,)
        properconf.edit_secrets(path, env, secrets_header=header)
    return secrets


def get_generators_cli(app):
    attrs = {
        "__doc__": """Generate new code.""",
    }

    for name in ("resource", "controller", "model"):
        attrs[name] = _get_cmd(app, generators, f"gen_{name}")

    return type("Generators", (pyceo.Cli,), attrs)


def get_static_cli(app):
    attrs = {
        "__doc__": """Manage static files.""",
    }

    for name in ("bundle", "build", "clean", "compile"):
        attrs[name] = _get_cmd(app, static, name)

    return type("Static", (pyceo.Cli,), attrs)


def _get_cmd(app, module, name):
    func = getattr(module, name)

    def cmd(self, *args, **kwargs):
        return func(app, *args, **kwargs)

    cmd.__name__ = name
    cmd.__doc__ = func.__doc__
    return cmd
