# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseSweepHistoryInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'created_dt': 'datetime',
        'ended_timestamp': 'float',
        'id': 'int',
        'immutable_slug': 'str',
        'message': 'str',
        'started_timestamp': 'float',
        'status': 'str',
        'sweep_history_sweep': 'int',
        'sweep_id': 'int',
        'updated_dt': 'datetime'
    }

    attribute_map = {
        'created_dt': 'created_dt',
        'ended_timestamp': 'ended_timestamp',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'message': 'message',
        'started_timestamp': 'started_timestamp',
        'status': 'status',
        'sweep_history_sweep': 'sweep_history_sweep',
        'sweep_id': 'sweep_id',
        'updated_dt': 'updated_dt'
    }

    def __init__(self, created_dt=None, ended_timestamp=None, id=None, immutable_slug=None, message=None, started_timestamp=None, status=None, sweep_history_sweep=None, sweep_id=None, updated_dt=None, local_vars_configuration=None):  # noqa: E501
        """ResponseSweepHistoryInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._created_dt = None
        self._ended_timestamp = None
        self._id = None
        self._immutable_slug = None
        self._message = None
        self._started_timestamp = None
        self._status = None
        self._sweep_history_sweep = None
        self._sweep_id = None
        self._updated_dt = None
        self.discriminator = None

        self.created_dt = created_dt
        self.ended_timestamp = ended_timestamp
        self.id = id
        self.immutable_slug = immutable_slug
        self.message = message
        self.started_timestamp = started_timestamp
        self.status = status
        self.sweep_history_sweep = sweep_history_sweep
        self.sweep_id = sweep_id
        self.updated_dt = updated_dt

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The created_dt of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseSweepHistoryInfo.


        :param created_dt: The created_dt of this ResponseSweepHistoryInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def ended_timestamp(self):
        """Gets the ended_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The ended_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: float
        """
        return self._ended_timestamp

    @ended_timestamp.setter
    def ended_timestamp(self, ended_timestamp):
        """Sets the ended_timestamp of this ResponseSweepHistoryInfo.


        :param ended_timestamp: The ended_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501
        :type ended_timestamp: float
        """

        self._ended_timestamp = ended_timestamp

    @property
    def id(self):
        """Gets the id of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The id of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseSweepHistoryInfo.


        :param id: The id of this ResponseSweepHistoryInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The immutable_slug of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ResponseSweepHistoryInfo.


        :param immutable_slug: The immutable_slug of this ResponseSweepHistoryInfo.  # noqa: E501
        :type immutable_slug: str
        """
        if self.local_vars_configuration.client_side_validation and immutable_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `immutable_slug`, must not be `None`")  # noqa: E501

        self._immutable_slug = immutable_slug

    @property
    def message(self):
        """Gets the message of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The message of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseSweepHistoryInfo.


        :param message: The message of this ResponseSweepHistoryInfo.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def started_timestamp(self):
        """Gets the started_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The started_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: float
        """
        return self._started_timestamp

    @started_timestamp.setter
    def started_timestamp(self, started_timestamp):
        """Sets the started_timestamp of this ResponseSweepHistoryInfo.


        :param started_timestamp: The started_timestamp of this ResponseSweepHistoryInfo.  # noqa: E501
        :type started_timestamp: float
        """
        if self.local_vars_configuration.client_side_validation and started_timestamp is None:  # noqa: E501
            raise ValueError("Invalid value for `started_timestamp`, must not be `None`")  # noqa: E501

        self._started_timestamp = started_timestamp

    @property
    def status(self):
        """Gets the status of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The status of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseSweepHistoryInfo.


        :param status: The status of this ResponseSweepHistoryInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def sweep_history_sweep(self):
        """Gets the sweep_history_sweep of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The sweep_history_sweep of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: int
        """
        return self._sweep_history_sweep

    @sweep_history_sweep.setter
    def sweep_history_sweep(self, sweep_history_sweep):
        """Sets the sweep_history_sweep of this ResponseSweepHistoryInfo.


        :param sweep_history_sweep: The sweep_history_sweep of this ResponseSweepHistoryInfo.  # noqa: E501
        :type sweep_history_sweep: int
        """
        if self.local_vars_configuration.client_side_validation and sweep_history_sweep is None:  # noqa: E501
            raise ValueError("Invalid value for `sweep_history_sweep`, must not be `None`")  # noqa: E501

        self._sweep_history_sweep = sweep_history_sweep

    @property
    def sweep_id(self):
        """Gets the sweep_id of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The sweep_id of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: int
        """
        return self._sweep_id

    @sweep_id.setter
    def sweep_id(self, sweep_id):
        """Sets the sweep_id of this ResponseSweepHistoryInfo.


        :param sweep_id: The sweep_id of this ResponseSweepHistoryInfo.  # noqa: E501
        :type sweep_id: int
        """
        if self.local_vars_configuration.client_side_validation and sweep_id is None:  # noqa: E501
            raise ValueError("Invalid value for `sweep_id`, must not be `None`")  # noqa: E501

        self._sweep_id = sweep_id

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseSweepHistoryInfo.  # noqa: E501


        :return: The updated_dt of this ResponseSweepHistoryInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseSweepHistoryInfo.


        :param updated_dt: The updated_dt of this ResponseSweepHistoryInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseSweepHistoryInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseSweepHistoryInfo):
            return True

        return self.to_dict() != other.to_dict()
