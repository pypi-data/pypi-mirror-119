# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseVolume(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'base_path': 'str',
        'bucket_name': 'str',
        'created_dt': 'datetime',
        'file_count': 'int',
        'id': 'int',
        'immutable_slug': 'str',
        'is_read_only': 'bool',
        'last_sync_time': 'datetime',
        'local_volume_config': 'OrmLocalVolumeConfig',
        'organization_id': 'int',
        'role_owner_ref': 'int',
        'role_type': 'str',
        'size': 'int',
        'status': 'str',
        'storage_id': 'int',
        'updated_dt': 'datetime',
        'volume_organization': 'int',
        'volume_storage': 'int'
    }

    attribute_map = {
        'base_path': 'base_path',
        'bucket_name': 'bucket_name',
        'created_dt': 'created_dt',
        'file_count': 'file_count',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'is_read_only': 'is_read_only',
        'last_sync_time': 'last_sync_time',
        'local_volume_config': 'local_volume_config',
        'organization_id': 'organization_id',
        'role_owner_ref': 'role_owner_ref',
        'role_type': 'role_type',
        'size': 'size',
        'status': 'status',
        'storage_id': 'storage_id',
        'updated_dt': 'updated_dt',
        'volume_organization': 'volume_organization',
        'volume_storage': 'volume_storage'
    }

    def __init__(self, base_path=None, bucket_name=None, created_dt=None, file_count=None, id=None, immutable_slug=None, is_read_only=None, last_sync_time=None, local_volume_config=None, organization_id=None, role_owner_ref=None, role_type=None, size=None, status=None, storage_id=None, updated_dt=None, volume_organization=None, volume_storage=None, local_vars_configuration=None):  # noqa: E501
        """ResponseVolume - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._base_path = None
        self._bucket_name = None
        self._created_dt = None
        self._file_count = None
        self._id = None
        self._immutable_slug = None
        self._is_read_only = None
        self._last_sync_time = None
        self._local_volume_config = None
        self._organization_id = None
        self._role_owner_ref = None
        self._role_type = None
        self._size = None
        self._status = None
        self._storage_id = None
        self._updated_dt = None
        self._volume_organization = None
        self._volume_storage = None
        self.discriminator = None

        self.base_path = base_path
        self.bucket_name = bucket_name
        self.created_dt = created_dt
        self.file_count = file_count
        self.id = id
        self.immutable_slug = immutable_slug
        self.is_read_only = is_read_only
        self.last_sync_time = last_sync_time
        if local_volume_config is not None:
            self.local_volume_config = local_volume_config
        self.organization_id = organization_id
        self.role_owner_ref = role_owner_ref
        self.role_type = role_type
        self.size = size
        self.status = status
        self.storage_id = storage_id
        self.updated_dt = updated_dt
        self.volume_organization = volume_organization
        self.volume_storage = volume_storage

    @property
    def base_path(self):
        """Gets the base_path of this ResponseVolume.  # noqa: E501


        :return: The base_path of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._base_path

    @base_path.setter
    def base_path(self, base_path):
        """Sets the base_path of this ResponseVolume.


        :param base_path: The base_path of this ResponseVolume.  # noqa: E501
        :type base_path: str
        """
        if self.local_vars_configuration.client_side_validation and base_path is None:  # noqa: E501
            raise ValueError("Invalid value for `base_path`, must not be `None`")  # noqa: E501

        self._base_path = base_path

    @property
    def bucket_name(self):
        """Gets the bucket_name of this ResponseVolume.  # noqa: E501


        :return: The bucket_name of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._bucket_name

    @bucket_name.setter
    def bucket_name(self, bucket_name):
        """Sets the bucket_name of this ResponseVolume.


        :param bucket_name: The bucket_name of this ResponseVolume.  # noqa: E501
        :type bucket_name: str
        """

        self._bucket_name = bucket_name

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseVolume.  # noqa: E501


        :return: The created_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseVolume.


        :param created_dt: The created_dt of this ResponseVolume.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def file_count(self):
        """Gets the file_count of this ResponseVolume.  # noqa: E501


        :return: The file_count of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._file_count

    @file_count.setter
    def file_count(self, file_count):
        """Sets the file_count of this ResponseVolume.


        :param file_count: The file_count of this ResponseVolume.  # noqa: E501
        :type file_count: int
        """
        if self.local_vars_configuration.client_side_validation and file_count is None:  # noqa: E501
            raise ValueError("Invalid value for `file_count`, must not be `None`")  # noqa: E501

        self._file_count = file_count

    @property
    def id(self):
        """Gets the id of this ResponseVolume.  # noqa: E501


        :return: The id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseVolume.


        :param id: The id of this ResponseVolume.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ResponseVolume.  # noqa: E501


        :return: The immutable_slug of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ResponseVolume.


        :param immutable_slug: The immutable_slug of this ResponseVolume.  # noqa: E501
        :type immutable_slug: str
        """
        if self.local_vars_configuration.client_side_validation and immutable_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `immutable_slug`, must not be `None`")  # noqa: E501

        self._immutable_slug = immutable_slug

    @property
    def is_read_only(self):
        """Gets the is_read_only of this ResponseVolume.  # noqa: E501


        :return: The is_read_only of this ResponseVolume.  # noqa: E501
        :rtype: bool
        """
        return self._is_read_only

    @is_read_only.setter
    def is_read_only(self, is_read_only):
        """Sets the is_read_only of this ResponseVolume.


        :param is_read_only: The is_read_only of this ResponseVolume.  # noqa: E501
        :type is_read_only: bool
        """
        if self.local_vars_configuration.client_side_validation and is_read_only is None:  # noqa: E501
            raise ValueError("Invalid value for `is_read_only`, must not be `None`")  # noqa: E501

        self._is_read_only = is_read_only

    @property
    def last_sync_time(self):
        """Gets the last_sync_time of this ResponseVolume.  # noqa: E501


        :return: The last_sync_time of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._last_sync_time

    @last_sync_time.setter
    def last_sync_time(self, last_sync_time):
        """Sets the last_sync_time of this ResponseVolume.


        :param last_sync_time: The last_sync_time of this ResponseVolume.  # noqa: E501
        :type last_sync_time: datetime
        """

        self._last_sync_time = last_sync_time

    @property
    def local_volume_config(self):
        """Gets the local_volume_config of this ResponseVolume.  # noqa: E501


        :return: The local_volume_config of this ResponseVolume.  # noqa: E501
        :rtype: OrmLocalVolumeConfig
        """
        return self._local_volume_config

    @local_volume_config.setter
    def local_volume_config(self, local_volume_config):
        """Sets the local_volume_config of this ResponseVolume.


        :param local_volume_config: The local_volume_config of this ResponseVolume.  # noqa: E501
        :type local_volume_config: OrmLocalVolumeConfig
        """

        self._local_volume_config = local_volume_config

    @property
    def organization_id(self):
        """Gets the organization_id of this ResponseVolume.  # noqa: E501


        :return: The organization_id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ResponseVolume.


        :param organization_id: The organization_id of this ResponseVolume.  # noqa: E501
        :type organization_id: int
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def role_owner_ref(self):
        """Gets the role_owner_ref of this ResponseVolume.  # noqa: E501


        :return: The role_owner_ref of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._role_owner_ref

    @role_owner_ref.setter
    def role_owner_ref(self, role_owner_ref):
        """Sets the role_owner_ref of this ResponseVolume.


        :param role_owner_ref: The role_owner_ref of this ResponseVolume.  # noqa: E501
        :type role_owner_ref: int
        """
        if self.local_vars_configuration.client_side_validation and role_owner_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `role_owner_ref`, must not be `None`")  # noqa: E501

        self._role_owner_ref = role_owner_ref

    @property
    def role_type(self):
        """Gets the role_type of this ResponseVolume.  # noqa: E501


        :return: The role_type of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this ResponseVolume.


        :param role_type: The role_type of this ResponseVolume.  # noqa: E501
        :type role_type: str
        """
        if self.local_vars_configuration.client_side_validation and role_type is None:  # noqa: E501
            raise ValueError("Invalid value for `role_type`, must not be `None`")  # noqa: E501

        self._role_type = role_type

    @property
    def size(self):
        """Gets the size of this ResponseVolume.  # noqa: E501


        :return: The size of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this ResponseVolume.


        :param size: The size of this ResponseVolume.  # noqa: E501
        :type size: int
        """
        if self.local_vars_configuration.client_side_validation and size is None:  # noqa: E501
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def status(self):
        """Gets the status of this ResponseVolume.  # noqa: E501


        :return: The status of this ResponseVolume.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseVolume.


        :param status: The status of this ResponseVolume.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def storage_id(self):
        """Gets the storage_id of this ResponseVolume.  # noqa: E501


        :return: The storage_id of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._storage_id

    @storage_id.setter
    def storage_id(self, storage_id):
        """Sets the storage_id of this ResponseVolume.


        :param storage_id: The storage_id of this ResponseVolume.  # noqa: E501
        :type storage_id: int
        """
        if self.local_vars_configuration.client_side_validation and storage_id is None:  # noqa: E501
            raise ValueError("Invalid value for `storage_id`, must not be `None`")  # noqa: E501

        self._storage_id = storage_id

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseVolume.  # noqa: E501


        :return: The updated_dt of this ResponseVolume.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseVolume.


        :param updated_dt: The updated_dt of this ResponseVolume.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def volume_organization(self):
        """Gets the volume_organization of this ResponseVolume.  # noqa: E501


        :return: The volume_organization of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._volume_organization

    @volume_organization.setter
    def volume_organization(self, volume_organization):
        """Sets the volume_organization of this ResponseVolume.


        :param volume_organization: The volume_organization of this ResponseVolume.  # noqa: E501
        :type volume_organization: int
        """
        if self.local_vars_configuration.client_side_validation and volume_organization is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_organization`, must not be `None`")  # noqa: E501

        self._volume_organization = volume_organization

    @property
    def volume_storage(self):
        """Gets the volume_storage of this ResponseVolume.  # noqa: E501


        :return: The volume_storage of this ResponseVolume.  # noqa: E501
        :rtype: int
        """
        return self._volume_storage

    @volume_storage.setter
    def volume_storage(self, volume_storage):
        """Sets the volume_storage of this ResponseVolume.


        :param volume_storage: The volume_storage of this ResponseVolume.  # noqa: E501
        :type volume_storage: int
        """
        if self.local_vars_configuration.client_side_validation and volume_storage is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_storage`, must not be `None`")  # noqa: E501

        self._volume_storage = volume_storage

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseVolume):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseVolume):
            return True

        return self.to_dict() != other.to_dict()
