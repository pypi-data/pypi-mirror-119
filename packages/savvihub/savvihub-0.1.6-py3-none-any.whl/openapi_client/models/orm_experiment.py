# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmExperiment(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'edges': 'OrmExperimentEdges',
        'experiment_plot_volume': 'int',
        'experiment_workload': 'int',
        'id': 'int',
        'metrics_summary': 'dict(str, object)',
        'number': 'int',
        'termination_protection': 'bool'
    }

    attribute_map = {
        'edges': 'edges',
        'experiment_plot_volume': 'experiment_plot_volume',
        'experiment_workload': 'experiment_workload',
        'id': 'id',
        'metrics_summary': 'metrics_summary',
        'number': 'number',
        'termination_protection': 'termination_protection'
    }

    def __init__(self, edges=None, experiment_plot_volume=None, experiment_workload=None, id=None, metrics_summary=None, number=None, termination_protection=None, local_vars_configuration=None):  # noqa: E501
        """OrmExperiment - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._edges = None
        self._experiment_plot_volume = None
        self._experiment_workload = None
        self._id = None
        self._metrics_summary = None
        self._number = None
        self._termination_protection = None
        self.discriminator = None

        if edges is not None:
            self.edges = edges
        if experiment_plot_volume is not None:
            self.experiment_plot_volume = experiment_plot_volume
        if experiment_workload is not None:
            self.experiment_workload = experiment_workload
        if id is not None:
            self.id = id
        if metrics_summary is not None:
            self.metrics_summary = metrics_summary
        if number is not None:
            self.number = number
        if termination_protection is not None:
            self.termination_protection = termination_protection

    @property
    def edges(self):
        """Gets the edges of this OrmExperiment.  # noqa: E501


        :return: The edges of this OrmExperiment.  # noqa: E501
        :rtype: OrmExperimentEdges
        """
        return self._edges

    @edges.setter
    def edges(self, edges):
        """Sets the edges of this OrmExperiment.


        :param edges: The edges of this OrmExperiment.  # noqa: E501
        :type edges: OrmExperimentEdges
        """

        self._edges = edges

    @property
    def experiment_plot_volume(self):
        """Gets the experiment_plot_volume of this OrmExperiment.  # noqa: E501


        :return: The experiment_plot_volume of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume

    @experiment_plot_volume.setter
    def experiment_plot_volume(self, experiment_plot_volume):
        """Sets the experiment_plot_volume of this OrmExperiment.


        :param experiment_plot_volume: The experiment_plot_volume of this OrmExperiment.  # noqa: E501
        :type experiment_plot_volume: int
        """

        self._experiment_plot_volume = experiment_plot_volume

    @property
    def experiment_workload(self):
        """Gets the experiment_workload of this OrmExperiment.  # noqa: E501


        :return: The experiment_workload of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._experiment_workload

    @experiment_workload.setter
    def experiment_workload(self, experiment_workload):
        """Sets the experiment_workload of this OrmExperiment.


        :param experiment_workload: The experiment_workload of this OrmExperiment.  # noqa: E501
        :type experiment_workload: int
        """

        self._experiment_workload = experiment_workload

    @property
    def id(self):
        """Gets the id of this OrmExperiment.  # noqa: E501


        :return: The id of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrmExperiment.


        :param id: The id of this OrmExperiment.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this OrmExperiment.  # noqa: E501


        :return: The metrics_summary of this OrmExperiment.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this OrmExperiment.


        :param metrics_summary: The metrics_summary of this OrmExperiment.  # noqa: E501
        :type metrics_summary: dict(str, object)
        """

        self._metrics_summary = metrics_summary

    @property
    def number(self):
        """Gets the number of this OrmExperiment.  # noqa: E501


        :return: The number of this OrmExperiment.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this OrmExperiment.


        :param number: The number of this OrmExperiment.  # noqa: E501
        :type number: int
        """

        self._number = number

    @property
    def termination_protection(self):
        """Gets the termination_protection of this OrmExperiment.  # noqa: E501


        :return: The termination_protection of this OrmExperiment.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this OrmExperiment.


        :param termination_protection: The termination_protection of this OrmExperiment.  # noqa: E501
        :type termination_protection: bool
        """

        self._termination_protection = termination_protection

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmExperiment):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmExperiment):
            return True

        return self.to_dict() != other.to_dict()
