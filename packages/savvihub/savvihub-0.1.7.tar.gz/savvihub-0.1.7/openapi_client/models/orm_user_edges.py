# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class OrmUserEdges(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_tokens': 'list[OrmAccessToken]',
        'models': 'list[OrmModel]',
        'user_organization': 'list[OrmUserOrganization]',
        'workloads': 'list[OrmWorkload]'
    }

    attribute_map = {
        'access_tokens': 'access_tokens',
        'models': 'models',
        'user_organization': 'user_organization',
        'workloads': 'workloads'
    }

    def __init__(self, access_tokens=None, models=None, user_organization=None, workloads=None, local_vars_configuration=None):  # noqa: E501
        """OrmUserEdges - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_tokens = None
        self._models = None
        self._user_organization = None
        self._workloads = None
        self.discriminator = None

        if access_tokens is not None:
            self.access_tokens = access_tokens
        if models is not None:
            self.models = models
        if user_organization is not None:
            self.user_organization = user_organization
        if workloads is not None:
            self.workloads = workloads

    @property
    def access_tokens(self):
        """Gets the access_tokens of this OrmUserEdges.  # noqa: E501


        :return: The access_tokens of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmAccessToken]
        """
        return self._access_tokens

    @access_tokens.setter
    def access_tokens(self, access_tokens):
        """Sets the access_tokens of this OrmUserEdges.


        :param access_tokens: The access_tokens of this OrmUserEdges.  # noqa: E501
        :type access_tokens: list[OrmAccessToken]
        """

        self._access_tokens = access_tokens

    @property
    def models(self):
        """Gets the models of this OrmUserEdges.  # noqa: E501


        :return: The models of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmModel]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this OrmUserEdges.


        :param models: The models of this OrmUserEdges.  # noqa: E501
        :type models: list[OrmModel]
        """

        self._models = models

    @property
    def user_organization(self):
        """Gets the user_organization of this OrmUserEdges.  # noqa: E501


        :return: The user_organization of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmUserOrganization]
        """
        return self._user_organization

    @user_organization.setter
    def user_organization(self, user_organization):
        """Sets the user_organization of this OrmUserEdges.


        :param user_organization: The user_organization of this OrmUserEdges.  # noqa: E501
        :type user_organization: list[OrmUserOrganization]
        """

        self._user_organization = user_organization

    @property
    def workloads(self):
        """Gets the workloads of this OrmUserEdges.  # noqa: E501


        :return: The workloads of this OrmUserEdges.  # noqa: E501
        :rtype: list[OrmWorkload]
        """
        return self._workloads

    @workloads.setter
    def workloads(self, workloads):
        """Sets the workloads of this OrmUserEdges.


        :param workloads: The workloads of this OrmUserEdges.  # noqa: E501
        :type workloads: list[OrmWorkload]
        """

        self._workloads = workloads

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrmUserEdges):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrmUserEdges):
            return True

        return self.to_dict() != other.to_dict()
