# coding: utf-8

"""
    Aron API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


try:
    from inspect import getfullargspec
except ImportError:
    from inspect import getargspec as getfullargspec
import pprint
import re  # noqa: F401
import six

from openapi_client.configuration import Configuration


class ResponseExperimentInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'access_token_id': 'int',
        'cli_driven_project': 'ResponseCLIDrivenProject',
        'created_by': 'ResponseUser',
        'created_by_id': 'int',
        'created_dt': 'datetime',
        'endpoints': 'ResponseWorkloadEndpoints',
        'env_vars': 'OrmEnvVars',
        'exit_code': 'int',
        'experiment_plot_volume': 'int',
        'experiment_plot_volume_id': 'int',
        'experiment_workload': 'int',
        'experiment_workload_id': 'int',
        'final_cost': 'float',
        'histories': 'list[ResponseWorkloadHistoryInfo]',
        'id': 'int',
        'immutable_slug': 'str',
        'kernel_cluster': 'ResponseKernelCluster',
        'kernel_cluster_id': 'int',
        'kernel_cluster_node': 'ResponseKernelClusterNode',
        'kernel_cluster_node_id': 'int',
        'kernel_cluster_select_policies': 'OrmKernelClusterSelectPolicies',
        'kernel_image': 'ResponseKernelImage',
        'kernel_image_id': 'int',
        'kernel_resource_spec': 'ResponseKernelResourceSpec',
        'kernel_resource_spec_id': 'int',
        'message': 'str',
        'metrics_summary': 'OrmExperimentMetricsSummary',
        'name': 'str',
        'number': 'int',
        'organization': 'ResponseOrganization',
        'organization_id': 'int',
        'project': 'ResponseProject',
        'project_id': 'int',
        'reproduce_command': 'str',
        'slug': 'str',
        'source_code_link': 'list[ResponseProjectLink]',
        'start_command': 'str',
        'status': 'str',
        'status_last_updated': 'datetime',
        'status_reason': 'str',
        'sweep': 'ResponseSweepInfo',
        'sweep_id': 'int',
        'termination_protection': 'bool',
        'type': 'str',
        'updated_dt': 'datetime',
        'version_control_project': 'ResponseVersionControlProject',
        'volume_mounts': 'ResponseVolumeMountInfos',
        'workload_access_token': 'int',
        'workload_created_by': 'int',
        'workload_kernel_cluster': 'int',
        'workload_kernel_cluster_node': 'int',
        'workload_kernel_image': 'int',
        'workload_kernel_resource_spec': 'int',
        'workload_organization': 'int',
        'workload_project': 'int',
        'workload_sweep': 'int'
    }

    attribute_map = {
        'access_token_id': 'access_token_id',
        'cli_driven_project': 'cli_driven_project',
        'created_by': 'created_by',
        'created_by_id': 'created_by_id',
        'created_dt': 'created_dt',
        'endpoints': 'endpoints',
        'env_vars': 'env_vars',
        'exit_code': 'exit_code',
        'experiment_plot_volume': 'experiment_plot_volume',
        'experiment_plot_volume_id': 'experiment_plot_volume_id',
        'experiment_workload': 'experiment_workload',
        'experiment_workload_id': 'experiment_workload_id',
        'final_cost': 'final_cost',
        'histories': 'histories',
        'id': 'id',
        'immutable_slug': 'immutable_slug',
        'kernel_cluster': 'kernel_cluster',
        'kernel_cluster_id': 'kernel_cluster_id',
        'kernel_cluster_node': 'kernel_cluster_node',
        'kernel_cluster_node_id': 'kernel_cluster_node_id',
        'kernel_cluster_select_policies': 'kernel_cluster_select_policies',
        'kernel_image': 'kernel_image',
        'kernel_image_id': 'kernel_image_id',
        'kernel_resource_spec': 'kernel_resource_spec',
        'kernel_resource_spec_id': 'kernel_resource_spec_id',
        'message': 'message',
        'metrics_summary': 'metrics_summary',
        'name': 'name',
        'number': 'number',
        'organization': 'organization',
        'organization_id': 'organization_id',
        'project': 'project',
        'project_id': 'project_id',
        'reproduce_command': 'reproduce_command',
        'slug': 'slug',
        'source_code_link': 'source_code_link',
        'start_command': 'start_command',
        'status': 'status',
        'status_last_updated': 'status_last_updated',
        'status_reason': 'status_reason',
        'sweep': 'sweep',
        'sweep_id': 'sweep_id',
        'termination_protection': 'termination_protection',
        'type': 'type',
        'updated_dt': 'updated_dt',
        'version_control_project': 'version_control_project',
        'volume_mounts': 'volume_mounts',
        'workload_access_token': 'workload_access_token',
        'workload_created_by': 'workload_created_by',
        'workload_kernel_cluster': 'workload_kernel_cluster',
        'workload_kernel_cluster_node': 'workload_kernel_cluster_node',
        'workload_kernel_image': 'workload_kernel_image',
        'workload_kernel_resource_spec': 'workload_kernel_resource_spec',
        'workload_organization': 'workload_organization',
        'workload_project': 'workload_project',
        'workload_sweep': 'workload_sweep'
    }

    def __init__(self, access_token_id=None, cli_driven_project=None, created_by=None, created_by_id=None, created_dt=None, endpoints=None, env_vars=None, exit_code=None, experiment_plot_volume=None, experiment_plot_volume_id=None, experiment_workload=None, experiment_workload_id=None, final_cost=None, histories=None, id=None, immutable_slug=None, kernel_cluster=None, kernel_cluster_id=None, kernel_cluster_node=None, kernel_cluster_node_id=None, kernel_cluster_select_policies=None, kernel_image=None, kernel_image_id=None, kernel_resource_spec=None, kernel_resource_spec_id=None, message=None, metrics_summary=None, name=None, number=None, organization=None, organization_id=None, project=None, project_id=None, reproduce_command=None, slug=None, source_code_link=None, start_command=None, status=None, status_last_updated=None, status_reason=None, sweep=None, sweep_id=None, termination_protection=None, type=None, updated_dt=None, version_control_project=None, volume_mounts=None, workload_access_token=None, workload_created_by=None, workload_kernel_cluster=None, workload_kernel_cluster_node=None, workload_kernel_image=None, workload_kernel_resource_spec=None, workload_organization=None, workload_project=None, workload_sweep=None, local_vars_configuration=None):  # noqa: E501
        """ResponseExperimentInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration.get_default_copy()
        self.local_vars_configuration = local_vars_configuration

        self._access_token_id = None
        self._cli_driven_project = None
        self._created_by = None
        self._created_by_id = None
        self._created_dt = None
        self._endpoints = None
        self._env_vars = None
        self._exit_code = None
        self._experiment_plot_volume = None
        self._experiment_plot_volume_id = None
        self._experiment_workload = None
        self._experiment_workload_id = None
        self._final_cost = None
        self._histories = None
        self._id = None
        self._immutable_slug = None
        self._kernel_cluster = None
        self._kernel_cluster_id = None
        self._kernel_cluster_node = None
        self._kernel_cluster_node_id = None
        self._kernel_cluster_select_policies = None
        self._kernel_image = None
        self._kernel_image_id = None
        self._kernel_resource_spec = None
        self._kernel_resource_spec_id = None
        self._message = None
        self._metrics_summary = None
        self._name = None
        self._number = None
        self._organization = None
        self._organization_id = None
        self._project = None
        self._project_id = None
        self._reproduce_command = None
        self._slug = None
        self._source_code_link = None
        self._start_command = None
        self._status = None
        self._status_last_updated = None
        self._status_reason = None
        self._sweep = None
        self._sweep_id = None
        self._termination_protection = None
        self._type = None
        self._updated_dt = None
        self._version_control_project = None
        self._volume_mounts = None
        self._workload_access_token = None
        self._workload_created_by = None
        self._workload_kernel_cluster = None
        self._workload_kernel_cluster_node = None
        self._workload_kernel_image = None
        self._workload_kernel_resource_spec = None
        self._workload_organization = None
        self._workload_project = None
        self._workload_sweep = None
        self.discriminator = None

        self.access_token_id = access_token_id
        if cli_driven_project is not None:
            self.cli_driven_project = cli_driven_project
        self.created_by = created_by
        self.created_by_id = created_by_id
        self.created_dt = created_dt
        self.endpoints = endpoints
        if env_vars is not None:
            self.env_vars = env_vars
        self.exit_code = exit_code
        self.experiment_plot_volume = experiment_plot_volume
        self.experiment_plot_volume_id = experiment_plot_volume_id
        self.experiment_workload = experiment_workload
        self.experiment_workload_id = experiment_workload_id
        self.final_cost = final_cost
        self.histories = histories
        self.id = id
        self.immutable_slug = immutable_slug
        if kernel_cluster is not None:
            self.kernel_cluster = kernel_cluster
        self.kernel_cluster_id = kernel_cluster_id
        if kernel_cluster_node is not None:
            self.kernel_cluster_node = kernel_cluster_node
        self.kernel_cluster_node_id = kernel_cluster_node_id
        if kernel_cluster_select_policies is not None:
            self.kernel_cluster_select_policies = kernel_cluster_select_policies
        self.kernel_image = kernel_image
        self.kernel_image_id = kernel_image_id
        self.kernel_resource_spec = kernel_resource_spec
        self.kernel_resource_spec_id = kernel_resource_spec_id
        self.message = message
        if metrics_summary is not None:
            self.metrics_summary = metrics_summary
        self.name = name
        self.number = number
        self.organization = organization
        self.organization_id = organization_id
        self.project = project
        self.project_id = project_id
        if reproduce_command is not None:
            self.reproduce_command = reproduce_command
        self.slug = slug
        self.source_code_link = source_code_link
        self.start_command = start_command
        self.status = status
        self.status_last_updated = status_last_updated
        self.status_reason = status_reason
        if sweep is not None:
            self.sweep = sweep
        self.sweep_id = sweep_id
        self.termination_protection = termination_protection
        self.type = type
        self.updated_dt = updated_dt
        if version_control_project is not None:
            self.version_control_project = version_control_project
        self.volume_mounts = volume_mounts
        self.workload_access_token = workload_access_token
        self.workload_created_by = workload_created_by
        self.workload_kernel_cluster = workload_kernel_cluster
        self.workload_kernel_cluster_node = workload_kernel_cluster_node
        self.workload_kernel_image = workload_kernel_image
        self.workload_kernel_resource_spec = workload_kernel_resource_spec
        self.workload_organization = workload_organization
        self.workload_project = workload_project
        self.workload_sweep = workload_sweep

    @property
    def access_token_id(self):
        """Gets the access_token_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The access_token_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._access_token_id

    @access_token_id.setter
    def access_token_id(self, access_token_id):
        """Sets the access_token_id of this ResponseExperimentInfo.


        :param access_token_id: The access_token_id of this ResponseExperimentInfo.  # noqa: E501
        :type access_token_id: int
        """

        self._access_token_id = access_token_id

    @property
    def cli_driven_project(self):
        """Gets the cli_driven_project of this ResponseExperimentInfo.  # noqa: E501


        :return: The cli_driven_project of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseCLIDrivenProject
        """
        return self._cli_driven_project

    @cli_driven_project.setter
    def cli_driven_project(self, cli_driven_project):
        """Sets the cli_driven_project of this ResponseExperimentInfo.


        :param cli_driven_project: The cli_driven_project of this ResponseExperimentInfo.  # noqa: E501
        :type cli_driven_project: ResponseCLIDrivenProject
        """

        self._cli_driven_project = cli_driven_project

    @property
    def created_by(self):
        """Gets the created_by of this ResponseExperimentInfo.  # noqa: E501


        :return: The created_by of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseUser
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ResponseExperimentInfo.


        :param created_by: The created_by of this ResponseExperimentInfo.  # noqa: E501
        :type created_by: ResponseUser
        """
        if self.local_vars_configuration.client_side_validation and created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by`, must not be `None`")  # noqa: E501

        self._created_by = created_by

    @property
    def created_by_id(self):
        """Gets the created_by_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The created_by_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this ResponseExperimentInfo.


        :param created_by_id: The created_by_id of this ResponseExperimentInfo.  # noqa: E501
        :type created_by_id: int
        """
        if self.local_vars_configuration.client_side_validation and created_by_id is None:  # noqa: E501
            raise ValueError("Invalid value for `created_by_id`, must not be `None`")  # noqa: E501

        self._created_by_id = created_by_id

    @property
    def created_dt(self):
        """Gets the created_dt of this ResponseExperimentInfo.  # noqa: E501


        :return: The created_dt of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._created_dt

    @created_dt.setter
    def created_dt(self, created_dt):
        """Sets the created_dt of this ResponseExperimentInfo.


        :param created_dt: The created_dt of this ResponseExperimentInfo.  # noqa: E501
        :type created_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and created_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `created_dt`, must not be `None`")  # noqa: E501

        self._created_dt = created_dt

    @property
    def endpoints(self):
        """Gets the endpoints of this ResponseExperimentInfo.  # noqa: E501


        :return: The endpoints of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseWorkloadEndpoints
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this ResponseExperimentInfo.


        :param endpoints: The endpoints of this ResponseExperimentInfo.  # noqa: E501
        :type endpoints: ResponseWorkloadEndpoints
        """
        if self.local_vars_configuration.client_side_validation and endpoints is None:  # noqa: E501
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def env_vars(self):
        """Gets the env_vars of this ResponseExperimentInfo.  # noqa: E501


        :return: The env_vars of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmEnvVars
        """
        return self._env_vars

    @env_vars.setter
    def env_vars(self, env_vars):
        """Sets the env_vars of this ResponseExperimentInfo.


        :param env_vars: The env_vars of this ResponseExperimentInfo.  # noqa: E501
        :type env_vars: OrmEnvVars
        """

        self._env_vars = env_vars

    @property
    def exit_code(self):
        """Gets the exit_code of this ResponseExperimentInfo.  # noqa: E501


        :return: The exit_code of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code):
        """Sets the exit_code of this ResponseExperimentInfo.


        :param exit_code: The exit_code of this ResponseExperimentInfo.  # noqa: E501
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def experiment_plot_volume(self):
        """Gets the experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume

    @experiment_plot_volume.setter
    def experiment_plot_volume(self, experiment_plot_volume):
        """Sets the experiment_plot_volume of this ResponseExperimentInfo.


        :param experiment_plot_volume: The experiment_plot_volume of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_plot_volume: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_plot_volume is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_plot_volume`, must not be `None`")  # noqa: E501

        self._experiment_plot_volume = experiment_plot_volume

    @property
    def experiment_plot_volume_id(self):
        """Gets the experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_plot_volume_id

    @experiment_plot_volume_id.setter
    def experiment_plot_volume_id(self, experiment_plot_volume_id):
        """Sets the experiment_plot_volume_id of this ResponseExperimentInfo.


        :param experiment_plot_volume_id: The experiment_plot_volume_id of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_plot_volume_id: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_plot_volume_id is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_plot_volume_id`, must not be `None`")  # noqa: E501

        self._experiment_plot_volume_id = experiment_plot_volume_id

    @property
    def experiment_workload(self):
        """Gets the experiment_workload of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_workload of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_workload

    @experiment_workload.setter
    def experiment_workload(self, experiment_workload):
        """Sets the experiment_workload of this ResponseExperimentInfo.


        :param experiment_workload: The experiment_workload of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_workload: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_workload is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_workload`, must not be `None`")  # noqa: E501

        self._experiment_workload = experiment_workload

    @property
    def experiment_workload_id(self):
        """Gets the experiment_workload_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The experiment_workload_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._experiment_workload_id

    @experiment_workload_id.setter
    def experiment_workload_id(self, experiment_workload_id):
        """Sets the experiment_workload_id of this ResponseExperimentInfo.


        :param experiment_workload_id: The experiment_workload_id of this ResponseExperimentInfo.  # noqa: E501
        :type experiment_workload_id: int
        """
        if self.local_vars_configuration.client_side_validation and experiment_workload_id is None:  # noqa: E501
            raise ValueError("Invalid value for `experiment_workload_id`, must not be `None`")  # noqa: E501

        self._experiment_workload_id = experiment_workload_id

    @property
    def final_cost(self):
        """Gets the final_cost of this ResponseExperimentInfo.  # noqa: E501


        :return: The final_cost of this ResponseExperimentInfo.  # noqa: E501
        :rtype: float
        """
        return self._final_cost

    @final_cost.setter
    def final_cost(self, final_cost):
        """Sets the final_cost of this ResponseExperimentInfo.


        :param final_cost: The final_cost of this ResponseExperimentInfo.  # noqa: E501
        :type final_cost: float
        """

        self._final_cost = final_cost

    @property
    def histories(self):
        """Gets the histories of this ResponseExperimentInfo.  # noqa: E501


        :return: The histories of this ResponseExperimentInfo.  # noqa: E501
        :rtype: list[ResponseWorkloadHistoryInfo]
        """
        return self._histories

    @histories.setter
    def histories(self, histories):
        """Sets the histories of this ResponseExperimentInfo.


        :param histories: The histories of this ResponseExperimentInfo.  # noqa: E501
        :type histories: list[ResponseWorkloadHistoryInfo]
        """
        if self.local_vars_configuration.client_side_validation and histories is None:  # noqa: E501
            raise ValueError("Invalid value for `histories`, must not be `None`")  # noqa: E501

        self._histories = histories

    @property
    def id(self):
        """Gets the id of this ResponseExperimentInfo.  # noqa: E501


        :return: The id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseExperimentInfo.


        :param id: The id of this ResponseExperimentInfo.  # noqa: E501
        :type id: int
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def immutable_slug(self):
        """Gets the immutable_slug of this ResponseExperimentInfo.  # noqa: E501


        :return: The immutable_slug of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._immutable_slug

    @immutable_slug.setter
    def immutable_slug(self, immutable_slug):
        """Sets the immutable_slug of this ResponseExperimentInfo.


        :param immutable_slug: The immutable_slug of this ResponseExperimentInfo.  # noqa: E501
        :type immutable_slug: str
        """
        if self.local_vars_configuration.client_side_validation and immutable_slug is None:  # noqa: E501
            raise ValueError("Invalid value for `immutable_slug`, must not be `None`")  # noqa: E501

        self._immutable_slug = immutable_slug

    @property
    def kernel_cluster(self):
        """Gets the kernel_cluster of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelCluster
        """
        return self._kernel_cluster

    @kernel_cluster.setter
    def kernel_cluster(self, kernel_cluster):
        """Sets the kernel_cluster of this ResponseExperimentInfo.


        :param kernel_cluster: The kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster: ResponseKernelCluster
        """

        self._kernel_cluster = kernel_cluster

    @property
    def kernel_cluster_id(self):
        """Gets the kernel_cluster_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_id

    @kernel_cluster_id.setter
    def kernel_cluster_id(self, kernel_cluster_id):
        """Sets the kernel_cluster_id of this ResponseExperimentInfo.


        :param kernel_cluster_id: The kernel_cluster_id of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_id: int
        """

        self._kernel_cluster_id = kernel_cluster_id

    @property
    def kernel_cluster_node(self):
        """Gets the kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelClusterNode
        """
        return self._kernel_cluster_node

    @kernel_cluster_node.setter
    def kernel_cluster_node(self, kernel_cluster_node):
        """Sets the kernel_cluster_node of this ResponseExperimentInfo.


        :param kernel_cluster_node: The kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_node: ResponseKernelClusterNode
        """

        self._kernel_cluster_node = kernel_cluster_node

    @property
    def kernel_cluster_node_id(self):
        """Gets the kernel_cluster_node_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_node_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_cluster_node_id

    @kernel_cluster_node_id.setter
    def kernel_cluster_node_id(self, kernel_cluster_node_id):
        """Sets the kernel_cluster_node_id of this ResponseExperimentInfo.


        :param kernel_cluster_node_id: The kernel_cluster_node_id of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_node_id: int
        """

        self._kernel_cluster_node_id = kernel_cluster_node_id

    @property
    def kernel_cluster_select_policies(self):
        """Gets the kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmKernelClusterSelectPolicies
        """
        return self._kernel_cluster_select_policies

    @kernel_cluster_select_policies.setter
    def kernel_cluster_select_policies(self, kernel_cluster_select_policies):
        """Sets the kernel_cluster_select_policies of this ResponseExperimentInfo.


        :param kernel_cluster_select_policies: The kernel_cluster_select_policies of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_cluster_select_policies: OrmKernelClusterSelectPolicies
        """

        self._kernel_cluster_select_policies = kernel_cluster_select_policies

    @property
    def kernel_image(self):
        """Gets the kernel_image of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelImage
        """
        return self._kernel_image

    @kernel_image.setter
    def kernel_image(self, kernel_image):
        """Sets the kernel_image of this ResponseExperimentInfo.


        :param kernel_image: The kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_image: ResponseKernelImage
        """
        if self.local_vars_configuration.client_side_validation and kernel_image is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image`, must not be `None`")  # noqa: E501

        self._kernel_image = kernel_image

    @property
    def kernel_image_id(self):
        """Gets the kernel_image_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_image_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_image_id

    @kernel_image_id.setter
    def kernel_image_id(self, kernel_image_id):
        """Sets the kernel_image_id of this ResponseExperimentInfo.


        :param kernel_image_id: The kernel_image_id of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_image_id: int
        """
        if self.local_vars_configuration.client_side_validation and kernel_image_id is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_image_id`, must not be `None`")  # noqa: E501

        self._kernel_image_id = kernel_image_id

    @property
    def kernel_resource_spec(self):
        """Gets the kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseKernelResourceSpec
        """
        return self._kernel_resource_spec

    @kernel_resource_spec.setter
    def kernel_resource_spec(self, kernel_resource_spec):
        """Sets the kernel_resource_spec of this ResponseExperimentInfo.


        :param kernel_resource_spec: The kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_resource_spec: ResponseKernelResourceSpec
        """
        if self.local_vars_configuration.client_side_validation and kernel_resource_spec is None:  # noqa: E501
            raise ValueError("Invalid value for `kernel_resource_spec`, must not be `None`")  # noqa: E501

        self._kernel_resource_spec = kernel_resource_spec

    @property
    def kernel_resource_spec_id(self):
        """Gets the kernel_resource_spec_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The kernel_resource_spec_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._kernel_resource_spec_id

    @kernel_resource_spec_id.setter
    def kernel_resource_spec_id(self, kernel_resource_spec_id):
        """Sets the kernel_resource_spec_id of this ResponseExperimentInfo.


        :param kernel_resource_spec_id: The kernel_resource_spec_id of this ResponseExperimentInfo.  # noqa: E501
        :type kernel_resource_spec_id: int
        """

        self._kernel_resource_spec_id = kernel_resource_spec_id

    @property
    def message(self):
        """Gets the message of this ResponseExperimentInfo.  # noqa: E501


        :return: The message of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ResponseExperimentInfo.


        :param message: The message of this ResponseExperimentInfo.  # noqa: E501
        :type message: str
        """
        if self.local_vars_configuration.client_side_validation and message is None:  # noqa: E501
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def metrics_summary(self):
        """Gets the metrics_summary of this ResponseExperimentInfo.  # noqa: E501


        :return: The metrics_summary of this ResponseExperimentInfo.  # noqa: E501
        :rtype: OrmExperimentMetricsSummary
        """
        return self._metrics_summary

    @metrics_summary.setter
    def metrics_summary(self, metrics_summary):
        """Sets the metrics_summary of this ResponseExperimentInfo.


        :param metrics_summary: The metrics_summary of this ResponseExperimentInfo.  # noqa: E501
        :type metrics_summary: OrmExperimentMetricsSummary
        """

        self._metrics_summary = metrics_summary

    @property
    def name(self):
        """Gets the name of this ResponseExperimentInfo.  # noqa: E501


        :return: The name of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseExperimentInfo.


        :param name: The name of this ResponseExperimentInfo.  # noqa: E501
        :type name: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def number(self):
        """Gets the number of this ResponseExperimentInfo.  # noqa: E501


        :return: The number of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ResponseExperimentInfo.


        :param number: The number of this ResponseExperimentInfo.  # noqa: E501
        :type number: int
        """
        if self.local_vars_configuration.client_side_validation and number is None:  # noqa: E501
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def organization(self):
        """Gets the organization of this ResponseExperimentInfo.  # noqa: E501


        :return: The organization of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseOrganization
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ResponseExperimentInfo.


        :param organization: The organization of this ResponseExperimentInfo.  # noqa: E501
        :type organization: ResponseOrganization
        """
        if self.local_vars_configuration.client_side_validation and organization is None:  # noqa: E501
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def organization_id(self):
        """Gets the organization_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The organization_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ResponseExperimentInfo.


        :param organization_id: The organization_id of this ResponseExperimentInfo.  # noqa: E501
        :type organization_id: int
        """
        if self.local_vars_configuration.client_side_validation and organization_id is None:  # noqa: E501
            raise ValueError("Invalid value for `organization_id`, must not be `None`")  # noqa: E501

        self._organization_id = organization_id

    @property
    def project(self):
        """Gets the project of this ResponseExperimentInfo.  # noqa: E501


        :return: The project of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseProject
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ResponseExperimentInfo.


        :param project: The project of this ResponseExperimentInfo.  # noqa: E501
        :type project: ResponseProject
        """
        if self.local_vars_configuration.client_side_validation and project is None:  # noqa: E501
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def project_id(self):
        """Gets the project_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The project_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ResponseExperimentInfo.


        :param project_id: The project_id of this ResponseExperimentInfo.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def reproduce_command(self):
        """Gets the reproduce_command of this ResponseExperimentInfo.  # noqa: E501


        :return: The reproduce_command of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._reproduce_command

    @reproduce_command.setter
    def reproduce_command(self, reproduce_command):
        """Sets the reproduce_command of this ResponseExperimentInfo.


        :param reproduce_command: The reproduce_command of this ResponseExperimentInfo.  # noqa: E501
        :type reproduce_command: str
        """

        self._reproduce_command = reproduce_command

    @property
    def slug(self):
        """Gets the slug of this ResponseExperimentInfo.  # noqa: E501


        :return: The slug of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ResponseExperimentInfo.


        :param slug: The slug of this ResponseExperimentInfo.  # noqa: E501
        :type slug: str
        """
        if self.local_vars_configuration.client_side_validation and slug is None:  # noqa: E501
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def source_code_link(self):
        """Gets the source_code_link of this ResponseExperimentInfo.  # noqa: E501


        :return: The source_code_link of this ResponseExperimentInfo.  # noqa: E501
        :rtype: list[ResponseProjectLink]
        """
        return self._source_code_link

    @source_code_link.setter
    def source_code_link(self, source_code_link):
        """Sets the source_code_link of this ResponseExperimentInfo.


        :param source_code_link: The source_code_link of this ResponseExperimentInfo.  # noqa: E501
        :type source_code_link: list[ResponseProjectLink]
        """
        if self.local_vars_configuration.client_side_validation and source_code_link is None:  # noqa: E501
            raise ValueError("Invalid value for `source_code_link`, must not be `None`")  # noqa: E501

        self._source_code_link = source_code_link

    @property
    def start_command(self):
        """Gets the start_command of this ResponseExperimentInfo.  # noqa: E501


        :return: The start_command of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._start_command

    @start_command.setter
    def start_command(self, start_command):
        """Sets the start_command of this ResponseExperimentInfo.


        :param start_command: The start_command of this ResponseExperimentInfo.  # noqa: E501
        :type start_command: str
        """
        if self.local_vars_configuration.client_side_validation and start_command is None:  # noqa: E501
            raise ValueError("Invalid value for `start_command`, must not be `None`")  # noqa: E501

        self._start_command = start_command

    @property
    def status(self):
        """Gets the status of this ResponseExperimentInfo.  # noqa: E501


        :return: The status of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ResponseExperimentInfo.


        :param status: The status of this ResponseExperimentInfo.  # noqa: E501
        :type status: str
        """
        if self.local_vars_configuration.client_side_validation and status is None:  # noqa: E501
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def status_last_updated(self):
        """Gets the status_last_updated of this ResponseExperimentInfo.  # noqa: E501


        :return: The status_last_updated of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._status_last_updated

    @status_last_updated.setter
    def status_last_updated(self, status_last_updated):
        """Sets the status_last_updated of this ResponseExperimentInfo.


        :param status_last_updated: The status_last_updated of this ResponseExperimentInfo.  # noqa: E501
        :type status_last_updated: datetime
        """
        if self.local_vars_configuration.client_side_validation and status_last_updated is None:  # noqa: E501
            raise ValueError("Invalid value for `status_last_updated`, must not be `None`")  # noqa: E501

        self._status_last_updated = status_last_updated

    @property
    def status_reason(self):
        """Gets the status_reason of this ResponseExperimentInfo.  # noqa: E501


        :return: The status_reason of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_reason

    @status_reason.setter
    def status_reason(self, status_reason):
        """Sets the status_reason of this ResponseExperimentInfo.


        :param status_reason: The status_reason of this ResponseExperimentInfo.  # noqa: E501
        :type status_reason: str
        """
        if self.local_vars_configuration.client_side_validation and status_reason is None:  # noqa: E501
            raise ValueError("Invalid value for `status_reason`, must not be `None`")  # noqa: E501

        self._status_reason = status_reason

    @property
    def sweep(self):
        """Gets the sweep of this ResponseExperimentInfo.  # noqa: E501


        :return: The sweep of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseSweepInfo
        """
        return self._sweep

    @sweep.setter
    def sweep(self, sweep):
        """Sets the sweep of this ResponseExperimentInfo.


        :param sweep: The sweep of this ResponseExperimentInfo.  # noqa: E501
        :type sweep: ResponseSweepInfo
        """

        self._sweep = sweep

    @property
    def sweep_id(self):
        """Gets the sweep_id of this ResponseExperimentInfo.  # noqa: E501


        :return: The sweep_id of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._sweep_id

    @sweep_id.setter
    def sweep_id(self, sweep_id):
        """Sets the sweep_id of this ResponseExperimentInfo.


        :param sweep_id: The sweep_id of this ResponseExperimentInfo.  # noqa: E501
        :type sweep_id: int
        """

        self._sweep_id = sweep_id

    @property
    def termination_protection(self):
        """Gets the termination_protection of this ResponseExperimentInfo.  # noqa: E501


        :return: The termination_protection of this ResponseExperimentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._termination_protection

    @termination_protection.setter
    def termination_protection(self, termination_protection):
        """Sets the termination_protection of this ResponseExperimentInfo.


        :param termination_protection: The termination_protection of this ResponseExperimentInfo.  # noqa: E501
        :type termination_protection: bool
        """
        if self.local_vars_configuration.client_side_validation and termination_protection is None:  # noqa: E501
            raise ValueError("Invalid value for `termination_protection`, must not be `None`")  # noqa: E501

        self._termination_protection = termination_protection

    @property
    def type(self):
        """Gets the type of this ResponseExperimentInfo.  # noqa: E501


        :return: The type of this ResponseExperimentInfo.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ResponseExperimentInfo.


        :param type: The type of this ResponseExperimentInfo.  # noqa: E501
        :type type: str
        """
        if self.local_vars_configuration.client_side_validation and type is None:  # noqa: E501
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def updated_dt(self):
        """Gets the updated_dt of this ResponseExperimentInfo.  # noqa: E501


        :return: The updated_dt of this ResponseExperimentInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_dt

    @updated_dt.setter
    def updated_dt(self, updated_dt):
        """Sets the updated_dt of this ResponseExperimentInfo.


        :param updated_dt: The updated_dt of this ResponseExperimentInfo.  # noqa: E501
        :type updated_dt: datetime
        """
        if self.local_vars_configuration.client_side_validation and updated_dt is None:  # noqa: E501
            raise ValueError("Invalid value for `updated_dt`, must not be `None`")  # noqa: E501

        self._updated_dt = updated_dt

    @property
    def version_control_project(self):
        """Gets the version_control_project of this ResponseExperimentInfo.  # noqa: E501


        :return: The version_control_project of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseVersionControlProject
        """
        return self._version_control_project

    @version_control_project.setter
    def version_control_project(self, version_control_project):
        """Sets the version_control_project of this ResponseExperimentInfo.


        :param version_control_project: The version_control_project of this ResponseExperimentInfo.  # noqa: E501
        :type version_control_project: ResponseVersionControlProject
        """

        self._version_control_project = version_control_project

    @property
    def volume_mounts(self):
        """Gets the volume_mounts of this ResponseExperimentInfo.  # noqa: E501


        :return: The volume_mounts of this ResponseExperimentInfo.  # noqa: E501
        :rtype: ResponseVolumeMountInfos
        """
        return self._volume_mounts

    @volume_mounts.setter
    def volume_mounts(self, volume_mounts):
        """Sets the volume_mounts of this ResponseExperimentInfo.


        :param volume_mounts: The volume_mounts of this ResponseExperimentInfo.  # noqa: E501
        :type volume_mounts: ResponseVolumeMountInfos
        """
        if self.local_vars_configuration.client_side_validation and volume_mounts is None:  # noqa: E501
            raise ValueError("Invalid value for `volume_mounts`, must not be `None`")  # noqa: E501

        self._volume_mounts = volume_mounts

    @property
    def workload_access_token(self):
        """Gets the workload_access_token of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_access_token of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_access_token

    @workload_access_token.setter
    def workload_access_token(self, workload_access_token):
        """Sets the workload_access_token of this ResponseExperimentInfo.


        :param workload_access_token: The workload_access_token of this ResponseExperimentInfo.  # noqa: E501
        :type workload_access_token: int
        """

        self._workload_access_token = workload_access_token

    @property
    def workload_created_by(self):
        """Gets the workload_created_by of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_created_by of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_created_by

    @workload_created_by.setter
    def workload_created_by(self, workload_created_by):
        """Sets the workload_created_by of this ResponseExperimentInfo.


        :param workload_created_by: The workload_created_by of this ResponseExperimentInfo.  # noqa: E501
        :type workload_created_by: int
        """
        if self.local_vars_configuration.client_side_validation and workload_created_by is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_created_by`, must not be `None`")  # noqa: E501

        self._workload_created_by = workload_created_by

    @property
    def workload_kernel_cluster(self):
        """Gets the workload_kernel_cluster of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_cluster

    @workload_kernel_cluster.setter
    def workload_kernel_cluster(self, workload_kernel_cluster):
        """Sets the workload_kernel_cluster of this ResponseExperimentInfo.


        :param workload_kernel_cluster: The workload_kernel_cluster of this ResponseExperimentInfo.  # noqa: E501
        :type workload_kernel_cluster: int
        """

        self._workload_kernel_cluster = workload_kernel_cluster

    @property
    def workload_kernel_cluster_node(self):
        """Gets the workload_kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_cluster_node

    @workload_kernel_cluster_node.setter
    def workload_kernel_cluster_node(self, workload_kernel_cluster_node):
        """Sets the workload_kernel_cluster_node of this ResponseExperimentInfo.


        :param workload_kernel_cluster_node: The workload_kernel_cluster_node of this ResponseExperimentInfo.  # noqa: E501
        :type workload_kernel_cluster_node: int
        """

        self._workload_kernel_cluster_node = workload_kernel_cluster_node

    @property
    def workload_kernel_image(self):
        """Gets the workload_kernel_image of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_image

    @workload_kernel_image.setter
    def workload_kernel_image(self, workload_kernel_image):
        """Sets the workload_kernel_image of this ResponseExperimentInfo.


        :param workload_kernel_image: The workload_kernel_image of this ResponseExperimentInfo.  # noqa: E501
        :type workload_kernel_image: int
        """
        if self.local_vars_configuration.client_side_validation and workload_kernel_image is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_kernel_image`, must not be `None`")  # noqa: E501

        self._workload_kernel_image = workload_kernel_image

    @property
    def workload_kernel_resource_spec(self):
        """Gets the workload_kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_kernel_resource_spec

    @workload_kernel_resource_spec.setter
    def workload_kernel_resource_spec(self, workload_kernel_resource_spec):
        """Sets the workload_kernel_resource_spec of this ResponseExperimentInfo.


        :param workload_kernel_resource_spec: The workload_kernel_resource_spec of this ResponseExperimentInfo.  # noqa: E501
        :type workload_kernel_resource_spec: int
        """

        self._workload_kernel_resource_spec = workload_kernel_resource_spec

    @property
    def workload_organization(self):
        """Gets the workload_organization of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_organization of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_organization

    @workload_organization.setter
    def workload_organization(self, workload_organization):
        """Sets the workload_organization of this ResponseExperimentInfo.


        :param workload_organization: The workload_organization of this ResponseExperimentInfo.  # noqa: E501
        :type workload_organization: int
        """
        if self.local_vars_configuration.client_side_validation and workload_organization is None:  # noqa: E501
            raise ValueError("Invalid value for `workload_organization`, must not be `None`")  # noqa: E501

        self._workload_organization = workload_organization

    @property
    def workload_project(self):
        """Gets the workload_project of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_project of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_project

    @workload_project.setter
    def workload_project(self, workload_project):
        """Sets the workload_project of this ResponseExperimentInfo.


        :param workload_project: The workload_project of this ResponseExperimentInfo.  # noqa: E501
        :type workload_project: int
        """

        self._workload_project = workload_project

    @property
    def workload_sweep(self):
        """Gets the workload_sweep of this ResponseExperimentInfo.  # noqa: E501


        :return: The workload_sweep of this ResponseExperimentInfo.  # noqa: E501
        :rtype: int
        """
        return self._workload_sweep

    @workload_sweep.setter
    def workload_sweep(self, workload_sweep):
        """Sets the workload_sweep of this ResponseExperimentInfo.


        :param workload_sweep: The workload_sweep of this ResponseExperimentInfo.  # noqa: E501
        :type workload_sweep: int
        """

        self._workload_sweep = workload_sweep

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = getfullargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResponseExperimentInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ResponseExperimentInfo):
            return True

        return self.to_dict() != other.to_dict()
