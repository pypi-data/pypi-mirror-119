# coding: utf-8
"""
    external/v1/external_session_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set

    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from grid.openapi.configuration import Configuration


class V1ClusterSpec(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_type': 'V1ClusterType',
        'desired_state': 'V1ClusterState',
        'driver': 'V1ClusterDriver',
        'gridlet_version': 'str',
        'internal': 'bool',
        'pause_automation': 'bool',
        'user_id': 'str'
    }

    attribute_map = {
        'cluster_type': 'clusterType',
        'desired_state': 'desiredState',
        'driver': 'driver',
        'gridlet_version': 'gridletVersion',
        'internal': 'internal',
        'pause_automation': 'pauseAutomation',
        'user_id': 'userId'
    }

    def __init__(
        self,
        cluster_type=None,
        desired_state=None,
        driver=None,
        gridlet_version=None,
        internal=None,
        pause_automation=None,
        user_id=None,
        _configuration=None
    ):  # noqa: E501
        """V1ClusterSpec - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_type = None
        self._desired_state = None
        self._driver = None
        self._gridlet_version = None
        self._internal = None
        self._pause_automation = None
        self._user_id = None
        self.discriminator = None

        if cluster_type is not None:
            self.cluster_type = cluster_type
        if desired_state is not None:
            self.desired_state = desired_state
        if driver is not None:
            self.driver = driver
        if gridlet_version is not None:
            self.gridlet_version = gridlet_version
        if internal is not None:
            self.internal = internal
        if pause_automation is not None:
            self.pause_automation = pause_automation
        if user_id is not None:
            self.user_id = user_id

    @property
    def cluster_type(self):
        """Gets the cluster_type of this V1ClusterSpec.  # noqa: E501


        :return: The cluster_type of this V1ClusterSpec.  # noqa: E501
        :rtype: V1ClusterType
        """
        return self._cluster_type

    @cluster_type.setter
    def cluster_type(self, cluster_type):
        """Sets the cluster_type of this V1ClusterSpec.


        :param cluster_type: The cluster_type of this V1ClusterSpec.  # noqa: E501
        :type: V1ClusterType
        """

        self._cluster_type = cluster_type

    @property
    def desired_state(self):
        """Gets the desired_state of this V1ClusterSpec.  # noqa: E501


        :return: The desired_state of this V1ClusterSpec.  # noqa: E501
        :rtype: V1ClusterState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state):
        """Sets the desired_state of this V1ClusterSpec.


        :param desired_state: The desired_state of this V1ClusterSpec.  # noqa: E501
        :type: V1ClusterState
        """

        self._desired_state = desired_state

    @property
    def driver(self):
        """Gets the driver of this V1ClusterSpec.  # noqa: E501


        :return: The driver of this V1ClusterSpec.  # noqa: E501
        :rtype: V1ClusterDriver
        """
        return self._driver

    @driver.setter
    def driver(self, driver):
        """Sets the driver of this V1ClusterSpec.


        :param driver: The driver of this V1ClusterSpec.  # noqa: E501
        :type: V1ClusterDriver
        """

        self._driver = driver

    @property
    def gridlet_version(self):
        """Gets the gridlet_version of this V1ClusterSpec.  # noqa: E501


        :return: The gridlet_version of this V1ClusterSpec.  # noqa: E501
        :rtype: str
        """
        return self._gridlet_version

    @gridlet_version.setter
    def gridlet_version(self, gridlet_version):
        """Sets the gridlet_version of this V1ClusterSpec.


        :param gridlet_version: The gridlet_version of this V1ClusterSpec.  # noqa: E501
        :type: str
        """

        self._gridlet_version = gridlet_version

    @property
    def internal(self):
        """Gets the internal of this V1ClusterSpec.  # noqa: E501


        :return: The internal of this V1ClusterSpec.  # noqa: E501
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal):
        """Sets the internal of this V1ClusterSpec.


        :param internal: The internal of this V1ClusterSpec.  # noqa: E501
        :type: bool
        """

        self._internal = internal

    @property
    def pause_automation(self):
        """Gets the pause_automation of this V1ClusterSpec.  # noqa: E501


        :return: The pause_automation of this V1ClusterSpec.  # noqa: E501
        :rtype: bool
        """
        return self._pause_automation

    @pause_automation.setter
    def pause_automation(self, pause_automation):
        """Sets the pause_automation of this V1ClusterSpec.


        :param pause_automation: The pause_automation of this V1ClusterSpec.  # noqa: E501
        :type: bool
        """

        self._pause_automation = pause_automation

    @property
    def user_id(self):
        """Gets the user_id of this V1ClusterSpec.  # noqa: E501


        :return: The user_id of this V1ClusterSpec.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this V1ClusterSpec.


        :param user_id: The user_id of this V1ClusterSpec.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item, value.items()
                    )
                )
            else:
                result[attr] = value
        if issubclass(V1ClusterSpec, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, V1ClusterSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, V1ClusterSpec):
            return True

        return self.to_dict() != other.to_dict()
