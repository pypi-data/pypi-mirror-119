Metadata-Version: 2.1
Name: wgba
Version: 1.0
Summary: Which genome build again?
Home-page: https://github.com/Chris1221/wgba
Author: Chris Cole
Author-email: ccole@well.ox.ac.uk
License: UNKNOWN
Project-URL: Bug Tracker, https://github.com/Chris1221/wgba/issues
Project-URL: Source, https://github.com/Chris1221/wgba
Platform: UNKNOWN
Requires-Python: >3.6
Description-Content-Type: text/markdown

# Which genome build again?

[![CircleCI](https://circleci.com/gh/Chris1221/wgba/tree/main.svg?style=svg)](https://circleci.com/gh/Chris1221/wgba/tree/main) [![codecov](https://codecov.io/gh/Chris1221/wgba/branch/main/graph/badge.svg?token=fp2S6CX5fq)](https://codecov.io/gh/Chris1221/wgba)

A species-agnostic tool to figure out the probable genome build of a file. Currently supports bigWig and bed files, and an easy method to add your own genome build.

Install with `pip`

```{sh}
pip install wgba
```

## Usage:

Auto detect file extension

```{sh}
wgba your_file.bed
```

Use a specific file extension, if your extension is non-standard for example

```{sh}
wgba -f bed your_file.bed
wgba -f bigwig your_file.bigWig
```

You can use shell globs to match multiple files, all of which will be processed independently

```{sh}
wgba *.bed 
```

You can mix and match supported files

```{sh}
wgba a_bed_file.bed and_a_bigwig.bw and_another.bigWig
```

Check if all of your files are on the same build with `-c`, `--check` 

```{sh}
wgba -c *.bed *.bw 
```

Summarise non-conforming chromosomes with `-s`, `--summary`

```{sh}
wgba -s bad_file.bed
```

Adjust the tolerance for build assignment with `-t`, `--tol`. This is useful if you know that one chromosome will never match.

```{sh}
wgba -t 2 one_bad_chromosome.bed
```

Add a genome build to the database

```{sh}
wgba -f add_build your_build.chrom.sizes
```

## Issues

This was written in about an hour for my own use. If you find something not working, please [raise an issue](https://github.com/Chris1221/wgba/issues/new/choose).



