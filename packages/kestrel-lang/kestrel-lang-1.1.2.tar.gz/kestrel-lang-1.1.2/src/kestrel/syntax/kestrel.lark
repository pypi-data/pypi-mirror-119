//
// Kestrel Grammar
//

start: statement*

//
// If no VARIABLE is given, default to _ in post-parsing
//

statement: VARIABLE "=" command
         | command
         
// "?" at the beginning will inline command
?command: get
        | find
        | disp
        | info
        | apply
        | join
        | sort
        | group
        | load
        | save
        | new
        | merge
       
merge: VARIABLE ("+" VARIABLE)*

disp: "disp"i VARIABLE ("attr"i STIXPATHS)? ("limit"i INT)?

info: "info"i VARIABLE

get: "get"i ENTITY_TYPE ("from"i DATASRC)? "where"i STIXPATTERNBODY (starttime endtime)?

find: "find"i ENTITY_TYPE RELATION (REVERSED)? VARIABLE (starttime endtime)?

apply: "apply"i ANALYTICS "on"i variables ("with"i anaparams)?

join: "join"i VARIABLE "," VARIABLE ("by"i STIXPATH "," STIXPATH)?

sort: "sort"i VARIABLE "by"i STIXPATH (ASC|DESC)?

group: "group"i VARIABLE "by"i STIXPATH

load: "load"i DUMPPATH ("as"i ENTITY_TYPE)?

save: "save"i VARIABLE "to"i DUMPPATH

new: "new"i (ENTITY_TYPE)? VARDATA

anaparams: (localargs (", " localargs)* | URI)

localargs: CNAME "=" valuelist
         | CNAME "=" QSTRING
         | CNAME "=" NUMBER -> number

valuelist: PATH ("," PATH)*

starttime: "START" "t'" ISOTIMESTAMP "'"

endtime: "STOP" "t'" ISOTIMESTAMP "'"

variables: VARIABLE ("," VARIABLE)*

VARIABLE: CNAME
ENTITY_TYPE: LETTER ("_"|LETTER|DIGIT|"-")*
ANALYTICS: (LETTER|DIGIT|/[-_.:\/]/)+
STIXPATH: (LETTER|DIGIT|/[-_.:']/)+
STIXPATHS: STIXPATH (/\s*,\s*/ STIXPATH)*
PATH: (LETTER|DIGIT|/[-_.:\/]/)+
DATASRC: (PATH|ESCAPED_STRING)
DUMPPATH: PATH
ASC: "asc"i
DESC: "desc"i
REVERSED: "by"i
COMMENT: /#.*/
URI: PATH

STIXPATTERNBODY: "[" /.+/ "]" | "(" /.+/ ")"

ISOTIMESTAMP: /\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d(\.\d+)?Z/

// manually add `WS*` since `%ignore WS` doesn't apply to spaces inside terminals
// https://github.com/lark-parser/lark/issues/99
QSTRING: WS* ESCAPED_STRING WS*
JSON_VALUE: WS* (ESCAPED_STRING|NUMBER) WS*
VARDATA: "[" (QSTRING ("," QSTRING)* | JSON_DICT ("," JSON_DICT)*) "]"
JSON_DICT: WS* "{" (QSTRING ":" JSON_VALUE) ("," QSTRING ":" JSON_VALUE)* "}" WS*

RELATION: WORD

%import common (CNAME, LETTER, DIGIT, WS, INT, WORD, ESCAPED_STRING, NUMBER)

%ignore WS
%ignore COMMENT
